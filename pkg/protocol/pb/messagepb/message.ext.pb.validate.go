// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/protocol/proto/message/message.ext.proto

package messagepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageRequestMultiError, or nil if none found.
func (m *SendMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRecipientId() <= 0 {
		err := SendMessageRequestValidationError{
			field:  "RecipientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientMsgId()) < 1 {
		err := SendMessageRequestValidationError{
			field:  "ClientMsgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMessageRequestMultiError(errors)
	}

	return nil
}

// SendMessageRequestMultiError is an error wrapping multiple validation errors
// returned by SendMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageRequestMultiError) AllErrors() []error { return m }

// SendMessageRequestValidationError is the validation error returned by
// SendMessageRequest.Validate if the designated constraints aren't met.
type SendMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRequestValidationError) ErrorName() string {
	return "SendMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRequestValidationError{}

// Validate checks the field values on SendMessageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageReplyMultiError, or nil if none found.
func (m *SendMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	// no validation rules for ConversationId

	// no validation rules for Seq

	// no validation rules for ServerTime

	// no validation rules for ClientMsgId

	if len(errors) > 0 {
		return SendMessageReplyMultiError(errors)
	}

	return nil
}

// SendMessageReplyMultiError is an error wrapping multiple validation errors
// returned by SendMessageReply.ValidateAll() if the designated constraints
// aren't met.
type SendMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageReplyMultiError) AllErrors() []error { return m }

// SendMessageReplyValidationError is the validation error returned by
// SendMessageReply.Validate if the designated constraints aren't met.
type SendMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageReplyValidationError) ErrorName() string { return "SendMessageReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageReplyValidationError{}

// Validate checks the field values on MessageContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageContentMultiError,
// or nil if none found.
func (m *MessageContent) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Content.(type) {
	case *MessageContent_Text:
		if v == nil {
			err := MessageContentValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetText()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "Text",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "Text",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageContentValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MessageContent_Image:
		if v == nil {
			err := MessageContentValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageContentValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MessageContent_Audio:
		if v == nil {
			err := MessageContentValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAudio()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "Audio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "Audio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageContentValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MessageContent_File:
		if v == nil {
			err := MessageContentValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageContentValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MessageContentMultiError(errors)
	}

	return nil
}

// MessageContentMultiError is an error wrapping multiple validation errors
// returned by MessageContent.ValidateAll() if the designated constraints
// aren't met.
type MessageContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageContentMultiError) AllErrors() []error { return m }

// MessageContentValidationError is the validation error returned by
// MessageContent.Validate if the designated constraints aren't met.
type MessageContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageContentValidationError) ErrorName() string { return "MessageContentValidationError" }

// Error satisfies the builtin error interface
func (e MessageContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageContentValidationError{}

// Validate checks the field values on TextContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TextContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TextContentMultiError, or
// nil if none found.
func (m *TextContent) ValidateAll() error {
	return m.validate(true)
}

func (m *TextContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 4096 {
		err := TextContentValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 4096 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TextContentMultiError(errors)
	}

	return nil
}

// TextContentMultiError is an error wrapping multiple validation errors
// returned by TextContent.ValidateAll() if the designated constraints aren't met.
type TextContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextContentMultiError) AllErrors() []error { return m }

// TextContentValidationError is the validation error returned by
// TextContent.Validate if the designated constraints aren't met.
type TextContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextContentValidationError) ErrorName() string { return "TextContentValidationError" }

// Error satisfies the builtin error interface
func (e TextContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextContentValidationError{}

// Validate checks the field values on ImageContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageContentMultiError, or
// nil if none found.
func (m *ImageContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Size

	if len(errors) > 0 {
		return ImageContentMultiError(errors)
	}

	return nil
}

// ImageContentMultiError is an error wrapping multiple validation errors
// returned by ImageContent.ValidateAll() if the designated constraints aren't met.
type ImageContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageContentMultiError) AllErrors() []error { return m }

// ImageContentValidationError is the validation error returned by
// ImageContent.Validate if the designated constraints aren't met.
type ImageContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageContentValidationError) ErrorName() string { return "ImageContentValidationError" }

// Error satisfies the builtin error interface
func (e ImageContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageContentValidationError{}

// Validate checks the field values on AudioContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AudioContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AudioContentMultiError, or
// nil if none found.
func (m *AudioContent) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Duration

	// no validation rules for Size

	if len(errors) > 0 {
		return AudioContentMultiError(errors)
	}

	return nil
}

// AudioContentMultiError is an error wrapping multiple validation errors
// returned by AudioContent.ValidateAll() if the designated constraints aren't met.
type AudioContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioContentMultiError) AllErrors() []error { return m }

// AudioContentValidationError is the validation error returned by
// AudioContent.Validate if the designated constraints aren't met.
type AudioContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioContentValidationError) ErrorName() string { return "AudioContentValidationError" }

// Error satisfies the builtin error interface
func (e AudioContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioContentValidationError{}

// Validate checks the field values on FileContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileContentMultiError, or
// nil if none found.
func (m *FileContent) ValidateAll() error {
	return m.validate(true)
}

func (m *FileContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Filename

	// no validation rules for Size

	// no validation rules for MimeType

	if len(errors) > 0 {
		return FileContentMultiError(errors)
	}

	return nil
}

// FileContentMultiError is an error wrapping multiple validation errors
// returned by FileContent.ValidateAll() if the designated constraints aren't met.
type FileContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileContentMultiError) AllErrors() []error { return m }

// FileContentValidationError is the validation error returned by
// FileContent.Validate if the designated constraints aren't met.
type FileContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileContentValidationError) ErrorName() string { return "FileContentValidationError" }

// Error satisfies the builtin error interface
func (e FileContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileContentValidationError{}
