// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/protocol/proto/friend/friend.ext.proto

package friendpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestRequestMultiError, or nil if none found.
func (m *SendFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRecipientId() < 1 {
		err := SendFriendRequestRequestValidationError{
			field:  "RecipientId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) > 255 {
		err := SendFriendRequestRequestValidationError{
			field:  "Message",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendFriendRequestRequestMultiError(errors)
	}

	return nil
}

// SendFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SendFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestRequestMultiError) AllErrors() []error { return m }

// SendFriendRequestRequestValidationError is the validation error returned by
// SendFriendRequestRequest.Validate if the designated constraints aren't met.
type SendFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestRequestValidationError) ErrorName() string {
	return "SendFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestRequestValidationError{}

// Validate checks the field values on SendFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestResponseMultiError, or nil if none found.
func (m *SendFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for Message

	if len(errors) > 0 {
		return SendFriendRequestResponseMultiError(errors)
	}

	return nil
}

// SendFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type SendFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestResponseMultiError) AllErrors() []error { return m }

// SendFriendRequestResponseValidationError is the validation error returned by
// SendFriendRequestResponse.Validate if the designated constraints aren't met.
type SendFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestResponseValidationError) ErrorName() string {
	return "SendFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestResponseValidationError{}

// Validate checks the field values on GetReceivedFriendRequestsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetReceivedFriendRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivedFriendRequestsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetReceivedFriendRequestsRequestMultiError, or nil if none found.
func (m *GetReceivedFriendRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivedFriendRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := GetReceivedFriendRequestsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := GetReceivedFriendRequestsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return GetReceivedFriendRequestsRequestMultiError(errors)
	}

	return nil
}

// GetReceivedFriendRequestsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetReceivedFriendRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReceivedFriendRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivedFriendRequestsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivedFriendRequestsRequestMultiError) AllErrors() []error { return m }

// GetReceivedFriendRequestsRequestValidationError is the validation error
// returned by GetReceivedFriendRequestsRequest.Validate if the designated
// constraints aren't met.
type GetReceivedFriendRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivedFriendRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivedFriendRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivedFriendRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivedFriendRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivedFriendRequestsRequestValidationError) ErrorName() string {
	return "GetReceivedFriendRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivedFriendRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivedFriendRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivedFriendRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivedFriendRequestsRequestValidationError{}

// Validate checks the field values on GetReceivedFriendRequestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetReceivedFriendRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivedFriendRequestsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetReceivedFriendRequestsResponseMultiError, or nil if none found.
func (m *GetReceivedFriendRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivedFriendRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReceivedFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReceivedFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReceivedFriendRequestsResponseValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetReceivedFriendRequestsResponseMultiError(errors)
	}

	return nil
}

// GetReceivedFriendRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetReceivedFriendRequestsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReceivedFriendRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivedFriendRequestsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivedFriendRequestsResponseMultiError) AllErrors() []error { return m }

// GetReceivedFriendRequestsResponseValidationError is the validation error
// returned by GetReceivedFriendRequestsResponse.Validate if the designated
// constraints aren't met.
type GetReceivedFriendRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivedFriendRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivedFriendRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivedFriendRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivedFriendRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivedFriendRequestsResponseValidationError) ErrorName() string {
	return "GetReceivedFriendRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivedFriendRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivedFriendRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivedFriendRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivedFriendRequestsResponseValidationError{}

// Validate checks the field values on GetSentFriendRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSentFriendRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSentFriendRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSentFriendRequestsRequestMultiError, or nil if none found.
func (m *GetSentFriendRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSentFriendRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := GetSentFriendRequestsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := GetSentFriendRequestsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return GetSentFriendRequestsRequestMultiError(errors)
	}

	return nil
}

// GetSentFriendRequestsRequestMultiError is an error wrapping multiple
// validation errors returned by GetSentFriendRequestsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSentFriendRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSentFriendRequestsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSentFriendRequestsRequestMultiError) AllErrors() []error { return m }

// GetSentFriendRequestsRequestValidationError is the validation error returned
// by GetSentFriendRequestsRequest.Validate if the designated constraints
// aren't met.
type GetSentFriendRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSentFriendRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSentFriendRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSentFriendRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSentFriendRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSentFriendRequestsRequestValidationError) ErrorName() string {
	return "GetSentFriendRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSentFriendRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSentFriendRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSentFriendRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSentFriendRequestsRequestValidationError{}

// Validate checks the field values on GetSentFriendRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSentFriendRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSentFriendRequestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSentFriendRequestsResponseMultiError, or nil if none found.
func (m *GetSentFriendRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSentFriendRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSentFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSentFriendRequestsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSentFriendRequestsResponseValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetSentFriendRequestsResponseMultiError(errors)
	}

	return nil
}

// GetSentFriendRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by GetSentFriendRequestsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetSentFriendRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSentFriendRequestsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSentFriendRequestsResponseMultiError) AllErrors() []error { return m }

// GetSentFriendRequestsResponseValidationError is the validation error
// returned by GetSentFriendRequestsResponse.Validate if the designated
// constraints aren't met.
type GetSentFriendRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSentFriendRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSentFriendRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSentFriendRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSentFriendRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSentFriendRequestsResponseValidationError) ErrorName() string {
	return "GetSentFriendRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSentFriendRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSentFriendRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSentFriendRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSentFriendRequestsResponseValidationError{}

// Validate checks the field values on HandleFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleFriendRequestRequestMultiError, or nil if none found.
func (m *HandleFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRequestId() < 1 {
		err := HandleFriendRequestRequestValidationError{
			field:  "RequestId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _HandleFriendRequestRequest_Action_InLookup[m.GetAction()]; !ok {
		err := HandleFriendRequestRequestValidationError{
			field:  "Action",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HandleFriendRequestRequestMultiError(errors)
	}

	return nil
}

// HandleFriendRequestRequestMultiError is an error wrapping multiple
// validation errors returned by HandleFriendRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type HandleFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleFriendRequestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleFriendRequestRequestMultiError) AllErrors() []error { return m }

// HandleFriendRequestRequestValidationError is the validation error returned
// by HandleFriendRequestRequest.Validate if the designated constraints aren't met.
type HandleFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleFriendRequestRequestValidationError) ErrorName() string {
	return "HandleFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleFriendRequestRequestValidationError{}

var _HandleFriendRequestRequest_Action_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on HandleFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleFriendRequestResponseMultiError, or nil if none found.
func (m *HandleFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HandleFriendRequestResponseMultiError(errors)
	}

	return nil
}

// HandleFriendRequestResponseMultiError is an error wrapping multiple
// validation errors returned by HandleFriendRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type HandleFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleFriendRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleFriendRequestResponseMultiError) AllErrors() []error { return m }

// HandleFriendRequestResponseValidationError is the validation error returned
// by HandleFriendRequestResponse.Validate if the designated constraints
// aren't met.
type HandleFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleFriendRequestResponseValidationError) ErrorName() string {
	return "HandleFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleFriendRequestResponseValidationError{}

// Validate checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListRequestMultiError, or nil if none found.
func (m *GetFriendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := GetFriendListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := GetFriendListRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return GetFriendListRequestMultiError(errors)
	}

	return nil
}

// GetFriendListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListRequestMultiError) AllErrors() []error { return m }

// GetFriendListRequestValidationError is the validation error returned by
// GetFriendListRequest.Validate if the designated constraints aren't met.
type GetFriendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListRequestValidationError) ErrorName() string {
	return "GetFriendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListRequestValidationError{}

// Validate checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListResponseMultiError, or nil if none found.
func (m *GetFriendListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendListResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetFriendListResponseMultiError(errors)
	}

	return nil
}

// GetFriendListResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListResponseMultiError) AllErrors() []error { return m }

// GetFriendListResponseValidationError is the validation error returned by
// GetFriendListResponse.Validate if the designated constraints aren't met.
type GetFriendListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListResponseValidationError) ErrorName() string {
	return "GetFriendListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListResponseValidationError{}

// Validate checks the field values on FriendRequestInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FriendRequestInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendRequestInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FriendRequestInfoMultiError, or nil if none found.
func (m *FriendRequestInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendRequestInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RequesterId

	// no validation rules for RecipientId

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetRequesterInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FriendRequestInfoValidationError{
					field:  "RequesterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FriendRequestInfoValidationError{
					field:  "RequesterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequesterInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FriendRequestInfoValidationError{
				field:  "RequesterInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecipientInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FriendRequestInfoValidationError{
					field:  "RecipientInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FriendRequestInfoValidationError{
					field:  "RecipientInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipientInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FriendRequestInfoValidationError{
				field:  "RecipientInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FriendRequestInfoMultiError(errors)
	}

	return nil
}

// FriendRequestInfoMultiError is an error wrapping multiple validation errors
// returned by FriendRequestInfo.ValidateAll() if the designated constraints
// aren't met.
type FriendRequestInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendRequestInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendRequestInfoMultiError) AllErrors() []error { return m }

// FriendRequestInfoValidationError is the validation error returned by
// FriendRequestInfo.Validate if the designated constraints aren't met.
type FriendRequestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendRequestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendRequestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendRequestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendRequestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendRequestInfoValidationError) ErrorName() string {
	return "FriendRequestInfoValidationError"
}

// Error satisfies the builtin error interface
func (e FriendRequestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendRequestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendRequestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendRequestInfoValidationError{}

// Validate checks the field values on FriendInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendInfoMultiError, or
// nil if none found.
func (m *FriendInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FriendId

	// no validation rules for Remark

	// no validation rules for CategoryId

	// no validation rules for IsBlocked

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetFriendInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FriendInfoValidationError{
					field:  "FriendInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FriendInfoValidationError{
					field:  "FriendInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FriendInfoValidationError{
				field:  "FriendInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FriendInfoMultiError(errors)
	}

	return nil
}

// FriendInfoMultiError is an error wrapping multiple validation errors
// returned by FriendInfo.ValidateAll() if the designated constraints aren't met.
type FriendInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendInfoMultiError) AllErrors() []error { return m }

// FriendInfoValidationError is the validation error returned by
// FriendInfo.Validate if the designated constraints aren't met.
type FriendInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendInfoValidationError) ErrorName() string { return "FriendInfoValidationError" }

// Error satisfies the builtin error interface
func (e FriendInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendInfoValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for AvatarUrl

	// no validation rules for Nickname

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}
