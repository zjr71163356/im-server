// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/protocol/proto/friend/friend.ext.proto

package friendpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FriendExtService_SendFriendRequest_FullMethodName         = "/friend.FriendExtService/SendFriendRequest"
	FriendExtService_GetReceivedFriendRequests_FullMethodName = "/friend.FriendExtService/GetReceivedFriendRequests"
	FriendExtService_GetSentFriendRequests_FullMethodName     = "/friend.FriendExtService/GetSentFriendRequests"
	FriendExtService_HandleFriendRequest_FullMethodName       = "/friend.FriendExtService/HandleFriendRequest"
	FriendExtService_GetFriendList_FullMethodName             = "/friend.FriendExtService/GetFriendList"
)

// FriendExtServiceClient is the client API for FriendExtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 好友服务
type FriendExtServiceClient interface {
	// 发送好友申请
	SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error)
	// 获取收到的好友申请列表
	GetReceivedFriendRequests(ctx context.Context, in *GetReceivedFriendRequestsRequest, opts ...grpc.CallOption) (*GetReceivedFriendRequestsResponse, error)
	// 获取发送的好友申请列表
	GetSentFriendRequests(ctx context.Context, in *GetSentFriendRequestsRequest, opts ...grpc.CallOption) (*GetSentFriendRequestsResponse, error)
	// 处理好友申请（同意/拒绝/忽略）
	HandleFriendRequest(ctx context.Context, in *HandleFriendRequestRequest, opts ...grpc.CallOption) (*HandleFriendRequestResponse, error)
	// 获取好友列表
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
}

type friendExtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendExtServiceClient(cc grpc.ClientConnInterface) FriendExtServiceClient {
	return &friendExtServiceClient{cc}
}

func (c *friendExtServiceClient) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendRequestResponse)
	err := c.cc.Invoke(ctx, FriendExtService_SendFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendExtServiceClient) GetReceivedFriendRequests(ctx context.Context, in *GetReceivedFriendRequestsRequest, opts ...grpc.CallOption) (*GetReceivedFriendRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceivedFriendRequestsResponse)
	err := c.cc.Invoke(ctx, FriendExtService_GetReceivedFriendRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendExtServiceClient) GetSentFriendRequests(ctx context.Context, in *GetSentFriendRequestsRequest, opts ...grpc.CallOption) (*GetSentFriendRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSentFriendRequestsResponse)
	err := c.cc.Invoke(ctx, FriendExtService_GetSentFriendRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendExtServiceClient) HandleFriendRequest(ctx context.Context, in *HandleFriendRequestRequest, opts ...grpc.CallOption) (*HandleFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleFriendRequestResponse)
	err := c.cc.Invoke(ctx, FriendExtService_HandleFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendExtServiceClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, FriendExtService_GetFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendExtServiceServer is the server API for FriendExtService service.
// All implementations must embed UnimplementedFriendExtServiceServer
// for forward compatibility.
//
// 好友服务
type FriendExtServiceServer interface {
	// 发送好友申请
	SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error)
	// 获取收到的好友申请列表
	GetReceivedFriendRequests(context.Context, *GetReceivedFriendRequestsRequest) (*GetReceivedFriendRequestsResponse, error)
	// 获取发送的好友申请列表
	GetSentFriendRequests(context.Context, *GetSentFriendRequestsRequest) (*GetSentFriendRequestsResponse, error)
	// 处理好友申请（同意/拒绝/忽略）
	HandleFriendRequest(context.Context, *HandleFriendRequestRequest) (*HandleFriendRequestResponse, error)
	// 获取好友列表
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	mustEmbedUnimplementedFriendExtServiceServer()
}

// UnimplementedFriendExtServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendExtServiceServer struct{}

func (UnimplementedFriendExtServiceServer) SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedFriendExtServiceServer) GetReceivedFriendRequests(context.Context, *GetReceivedFriendRequestsRequest) (*GetReceivedFriendRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedFriendRequests not implemented")
}
func (UnimplementedFriendExtServiceServer) GetSentFriendRequests(context.Context, *GetSentFriendRequestsRequest) (*GetSentFriendRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentFriendRequests not implemented")
}
func (UnimplementedFriendExtServiceServer) HandleFriendRequest(context.Context, *HandleFriendRequestRequest) (*HandleFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriendRequest not implemented")
}
func (UnimplementedFriendExtServiceServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedFriendExtServiceServer) mustEmbedUnimplementedFriendExtServiceServer() {}
func (UnimplementedFriendExtServiceServer) testEmbeddedByValue()                          {}

// UnsafeFriendExtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendExtServiceServer will
// result in compilation errors.
type UnsafeFriendExtServiceServer interface {
	mustEmbedUnimplementedFriendExtServiceServer()
}

func RegisterFriendExtServiceServer(s grpc.ServiceRegistrar, srv FriendExtServiceServer) {
	// If the following call pancis, it indicates UnimplementedFriendExtServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FriendExtService_ServiceDesc, srv)
}

func _FriendExtService_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendExtServiceServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendExtService_SendFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendExtServiceServer).SendFriendRequest(ctx, req.(*SendFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendExtService_GetReceivedFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivedFriendRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendExtServiceServer).GetReceivedFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendExtService_GetReceivedFriendRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendExtServiceServer).GetReceivedFriendRequests(ctx, req.(*GetReceivedFriendRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendExtService_GetSentFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSentFriendRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendExtServiceServer).GetSentFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendExtService_GetSentFriendRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendExtServiceServer).GetSentFriendRequests(ctx, req.(*GetSentFriendRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendExtService_HandleFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendExtServiceServer).HandleFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendExtService_HandleFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendExtServiceServer).HandleFriendRequest(ctx, req.(*HandleFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendExtService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendExtServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendExtService_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendExtServiceServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendExtService_ServiceDesc is the grpc.ServiceDesc for FriendExtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendExtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friend.FriendExtService",
	HandlerType: (*FriendExtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFriendRequest",
			Handler:    _FriendExtService_SendFriendRequest_Handler,
		},
		{
			MethodName: "GetReceivedFriendRequests",
			Handler:    _FriendExtService_GetReceivedFriendRequests_Handler,
		},
		{
			MethodName: "GetSentFriendRequests",
			Handler:    _FriendExtService_GetSentFriendRequests_Handler,
		},
		{
			MethodName: "HandleFriendRequest",
			Handler:    _FriendExtService_HandleFriendRequest_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _FriendExtService_GetFriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protocol/proto/friend/friend.ext.proto",
}
