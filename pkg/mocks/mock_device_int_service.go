// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/protocol/pb/devicepb/device.int_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	devicepb "im-server/pkg/protocol/pb/devicepb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDeviceIntServiceClient is a mock of DeviceIntServiceClient interface.
type MockDeviceIntServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceIntServiceClientMockRecorder
}

// MockDeviceIntServiceClientMockRecorder is the mock recorder for MockDeviceIntServiceClient.
type MockDeviceIntServiceClientMockRecorder struct {
	mock *MockDeviceIntServiceClient
}

// NewMockDeviceIntServiceClient creates a new mock instance.
func NewMockDeviceIntServiceClient(ctrl *gomock.Controller) *MockDeviceIntServiceClient {
	mock := &MockDeviceIntServiceClient{ctrl: ctrl}
	mock.recorder = &MockDeviceIntServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceIntServiceClient) EXPECT() *MockDeviceIntServiceClientMockRecorder {
	return m.recorder
}

// ConnSignIn mocks base method.
func (m *MockDeviceIntServiceClient) ConnSignIn(ctx context.Context, in *devicepb.ConnSignInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnSignIn", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnSignIn indicates an expected call of ConnSignIn.
func (mr *MockDeviceIntServiceClientMockRecorder) ConnSignIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnSignIn", reflect.TypeOf((*MockDeviceIntServiceClient)(nil).ConnSignIn), varargs...)
}

// Offline mocks base method.
func (m *MockDeviceIntServiceClient) Offline(ctx context.Context, in *devicepb.OfflineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Offline", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Offline indicates an expected call of Offline.
func (mr *MockDeviceIntServiceClientMockRecorder) Offline(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offline", reflect.TypeOf((*MockDeviceIntServiceClient)(nil).Offline), varargs...)
}

// MockDeviceIntServiceServer is a mock of DeviceIntServiceServer interface.
type MockDeviceIntServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceIntServiceServerMockRecorder
}

// MockDeviceIntServiceServerMockRecorder is the mock recorder for MockDeviceIntServiceServer.
type MockDeviceIntServiceServerMockRecorder struct {
	mock *MockDeviceIntServiceServer
}

// NewMockDeviceIntServiceServer creates a new mock instance.
func NewMockDeviceIntServiceServer(ctrl *gomock.Controller) *MockDeviceIntServiceServer {
	mock := &MockDeviceIntServiceServer{ctrl: ctrl}
	mock.recorder = &MockDeviceIntServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceIntServiceServer) EXPECT() *MockDeviceIntServiceServerMockRecorder {
	return m.recorder
}

// ConnSignIn mocks base method.
func (m *MockDeviceIntServiceServer) ConnSignIn(arg0 context.Context, arg1 *devicepb.ConnSignInRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnSignIn", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnSignIn indicates an expected call of ConnSignIn.
func (mr *MockDeviceIntServiceServerMockRecorder) ConnSignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnSignIn", reflect.TypeOf((*MockDeviceIntServiceServer)(nil).ConnSignIn), arg0, arg1)
}

// Offline mocks base method.
func (m *MockDeviceIntServiceServer) Offline(arg0 context.Context, arg1 *devicepb.OfflineRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offline", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Offline indicates an expected call of Offline.
func (mr *MockDeviceIntServiceServerMockRecorder) Offline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offline", reflect.TypeOf((*MockDeviceIntServiceServer)(nil).Offline), arg0, arg1)
}

// mustEmbedUnimplementedDeviceIntServiceServer mocks base method.
func (m *MockDeviceIntServiceServer) mustEmbedUnimplementedDeviceIntServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDeviceIntServiceServer")
}

// mustEmbedUnimplementedDeviceIntServiceServer indicates an expected call of mustEmbedUnimplementedDeviceIntServiceServer.
func (mr *MockDeviceIntServiceServerMockRecorder) mustEmbedUnimplementedDeviceIntServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDeviceIntServiceServer", reflect.TypeOf((*MockDeviceIntServiceServer)(nil).mustEmbedUnimplementedDeviceIntServiceServer))
}

// MockUnsafeDeviceIntServiceServer is a mock of UnsafeDeviceIntServiceServer interface.
type MockUnsafeDeviceIntServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDeviceIntServiceServerMockRecorder
}

// MockUnsafeDeviceIntServiceServerMockRecorder is the mock recorder for MockUnsafeDeviceIntServiceServer.
type MockUnsafeDeviceIntServiceServerMockRecorder struct {
	mock *MockUnsafeDeviceIntServiceServer
}

// NewMockUnsafeDeviceIntServiceServer creates a new mock instance.
func NewMockUnsafeDeviceIntServiceServer(ctrl *gomock.Controller) *MockUnsafeDeviceIntServiceServer {
	mock := &MockUnsafeDeviceIntServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDeviceIntServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDeviceIntServiceServer) EXPECT() *MockUnsafeDeviceIntServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDeviceIntServiceServer mocks base method.
func (m *MockUnsafeDeviceIntServiceServer) mustEmbedUnimplementedDeviceIntServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDeviceIntServiceServer")
}

// mustEmbedUnimplementedDeviceIntServiceServer indicates an expected call of mustEmbedUnimplementedDeviceIntServiceServer.
func (mr *MockUnsafeDeviceIntServiceServerMockRecorder) mustEmbedUnimplementedDeviceIntServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDeviceIntServiceServer", reflect.TypeOf((*MockUnsafeDeviceIntServiceServer)(nil).mustEmbedUnimplementedDeviceIntServiceServer))
}
