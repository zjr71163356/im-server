// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/dao/querier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	dao "im-server/pkg/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AcceptFriendRequest mocks base method.
func (m *MockQuerier) AcceptFriendRequest(ctx context.Context, arg dao.AcceptFriendRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendRequest", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFriendRequest indicates an expected call of AcceptFriendRequest.
func (mr *MockQuerierMockRecorder) AcceptFriendRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequest", reflect.TypeOf((*MockQuerier)(nil).AcceptFriendRequest), ctx, arg)
}

// BlockFriend mocks base method.
func (m *MockQuerier) BlockFriend(ctx context.Context, arg dao.BlockFriendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockFriend", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockFriend indicates an expected call of BlockFriend.
func (mr *MockQuerierMockRecorder) BlockFriend(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockFriend", reflect.TypeOf((*MockQuerier)(nil).BlockFriend), ctx, arg)
}

// CheckExistingRequest mocks base method.
func (m *MockQuerier) CheckExistingRequest(ctx context.Context, arg dao.CheckExistingRequestParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistingRequest", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistingRequest indicates an expected call of CheckExistingRequest.
func (mr *MockQuerierMockRecorder) CheckExistingRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistingRequest", reflect.TypeOf((*MockQuerier)(nil).CheckExistingRequest), ctx, arg)
}

// CheckFriendship mocks base method.
func (m *MockQuerier) CheckFriendship(ctx context.Context, arg dao.CheckFriendshipParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFriendship", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFriendship indicates an expected call of CheckFriendship.
func (mr *MockQuerierMockRecorder) CheckFriendship(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFriendship", reflect.TypeOf((*MockQuerier)(nil).CheckFriendship), ctx, arg)
}

// CreateDevice mocks base method.
func (m *MockQuerier) CreateDevice(ctx context.Context, arg dao.CreateDeviceParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockQuerierMockRecorder) CreateDevice(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockQuerier)(nil).CreateDevice), ctx, arg)
}

// CreateFriend mocks base method.
func (m *MockQuerier) CreateFriend(ctx context.Context, arg dao.CreateFriendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriend", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriend indicates an expected call of CreateFriend.
func (mr *MockQuerierMockRecorder) CreateFriend(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriend", reflect.TypeOf((*MockQuerier)(nil).CreateFriend), ctx, arg)
}

// CreateFriendRequest mocks base method.
func (m *MockQuerier) CreateFriendRequest(ctx context.Context, arg dao.CreateFriendRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendRequest", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriendRequest indicates an expected call of CreateFriendRequest.
func (mr *MockQuerierMockRecorder) CreateFriendRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendRequest", reflect.TypeOf((*MockQuerier)(nil).CreateFriendRequest), ctx, arg)
}

// CreateGroup mocks base method.
func (m *MockQuerier) CreateGroup(ctx context.Context, arg dao.CreateGroupParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockQuerierMockRecorder) CreateGroup(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockQuerier)(nil).CreateGroup), ctx, arg)
}

// CreateGroupUser mocks base method.
func (m *MockQuerier) CreateGroupUser(ctx context.Context, arg dao.CreateGroupUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupUser indicates an expected call of CreateGroupUser.
func (mr *MockQuerierMockRecorder) CreateGroupUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupUser", reflect.TypeOf((*MockQuerier)(nil).CreateGroupUser), ctx, arg)
}

// CreateMessage mocks base method.
func (m *MockQuerier) CreateMessage(ctx context.Context, arg dao.CreateMessageParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockQuerierMockRecorder) CreateMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockQuerier)(nil).CreateMessage), ctx, arg)
}

// CreateSeq mocks base method.
func (m *MockQuerier) CreateSeq(ctx context.Context, arg dao.CreateSeqParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeq", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeq indicates an expected call of CreateSeq.
func (mr *MockQuerierMockRecorder) CreateSeq(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeq", reflect.TypeOf((*MockQuerier)(nil).CreateSeq), ctx, arg)
}

// CreateUserByUsername mocks base method.
func (m *MockQuerier) CreateUserByUsername(ctx context.Context, arg dao.CreateUserByUsernameParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserByUsername", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserByUsername indicates an expected call of CreateUserByUsername.
func (mr *MockQuerierMockRecorder) CreateUserByUsername(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserByUsername", reflect.TypeOf((*MockQuerier)(nil).CreateUserByUsername), ctx, arg)
}

// CreateUserMessage mocks base method.
func (m *MockQuerier) CreateUserMessage(ctx context.Context, arg dao.CreateUserMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserMessage", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserMessage indicates an expected call of CreateUserMessage.
func (mr *MockQuerierMockRecorder) CreateUserMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserMessage", reflect.TypeOf((*MockQuerier)(nil).CreateUserMessage), ctx, arg)
}

// DeleteDevice mocks base method.
func (m *MockQuerier) DeleteDevice(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockQuerierMockRecorder) DeleteDevice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockQuerier)(nil).DeleteDevice), ctx, id)
}

// DeleteFriend mocks base method.
func (m *MockQuerier) DeleteFriend(ctx context.Context, arg dao.DeleteFriendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriend", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriend indicates an expected call of DeleteFriend.
func (mr *MockQuerierMockRecorder) DeleteFriend(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriend", reflect.TypeOf((*MockQuerier)(nil).DeleteFriend), ctx, arg)
}

// DeleteFriendRequest mocks base method.
func (m *MockQuerier) DeleteFriendRequest(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriendRequest", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriendRequest indicates an expected call of DeleteFriendRequest.
func (mr *MockQuerierMockRecorder) DeleteFriendRequest(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendRequest", reflect.TypeOf((*MockQuerier)(nil).DeleteFriendRequest), ctx, id)
}

// DeleteGroup mocks base method.
func (m *MockQuerier) DeleteGroup(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockQuerierMockRecorder) DeleteGroup(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockQuerier)(nil).DeleteGroup), ctx, id)
}

// DeleteGroupUser mocks base method.
func (m *MockQuerier) DeleteGroupUser(ctx context.Context, arg dao.DeleteGroupUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupUser indicates an expected call of DeleteGroupUser.
func (mr *MockQuerierMockRecorder) DeleteGroupUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupUser", reflect.TypeOf((*MockQuerier)(nil).DeleteGroupUser), ctx, arg)
}

// DeleteMessage mocks base method.
func (m *MockQuerier) DeleteMessage(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockQuerierMockRecorder) DeleteMessage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockQuerier)(nil).DeleteMessage), ctx, id)
}

// DeleteSeq mocks base method.
func (m *MockQuerier) DeleteSeq(ctx context.Context, arg dao.DeleteSeqParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeq", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeq indicates an expected call of DeleteSeq.
func (mr *MockQuerierMockRecorder) DeleteSeq(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeq", reflect.TypeOf((*MockQuerier)(nil).DeleteSeq), ctx, arg)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), ctx, id)
}

// DeleteUserMessage mocks base method.
func (m *MockQuerier) DeleteUserMessage(ctx context.Context, arg dao.DeleteUserMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserMessage", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserMessage indicates an expected call of DeleteUserMessage.
func (mr *MockQuerierMockRecorder) DeleteUserMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserMessage", reflect.TypeOf((*MockQuerier)(nil).DeleteUserMessage), ctx, arg)
}

// GetBlockedFriends mocks base method.
func (m *MockQuerier) GetBlockedFriends(ctx context.Context, userID uint64) ([]dao.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockedFriends", ctx, userID)
	ret0, _ := ret[0].([]dao.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockedFriends indicates an expected call of GetBlockedFriends.
func (mr *MockQuerierMockRecorder) GetBlockedFriends(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockedFriends", reflect.TypeOf((*MockQuerier)(nil).GetBlockedFriends), ctx, userID)
}

// GetDevice mocks base method.
func (m *MockQuerier) GetDevice(ctx context.Context, id uint64) (dao.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, id)
	ret0, _ := ret[0].(dao.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockQuerierMockRecorder) GetDevice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockQuerier)(nil).GetDevice), ctx, id)
}

// GetDeviceByUserAndType mocks base method.
func (m *MockQuerier) GetDeviceByUserAndType(ctx context.Context, arg dao.GetDeviceByUserAndTypeParams) (dao.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByUserAndType", ctx, arg)
	ret0, _ := ret[0].(dao.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByUserAndType indicates an expected call of GetDeviceByUserAndType.
func (mr *MockQuerierMockRecorder) GetDeviceByUserAndType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByUserAndType", reflect.TypeOf((*MockQuerier)(nil).GetDeviceByUserAndType), ctx, arg)
}

// GetFriend mocks base method.
func (m *MockQuerier) GetFriend(ctx context.Context, arg dao.GetFriendParams) (dao.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriend", ctx, arg)
	ret0, _ := ret[0].(dao.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriend indicates an expected call of GetFriend.
func (mr *MockQuerierMockRecorder) GetFriend(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriend", reflect.TypeOf((*MockQuerier)(nil).GetFriend), ctx, arg)
}

// GetFriendRequest mocks base method.
func (m *MockQuerier) GetFriendRequest(ctx context.Context, id uint64) (dao.FriendRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRequest", ctx, id)
	ret0, _ := ret[0].(dao.FriendRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRequest indicates an expected call of GetFriendRequest.
func (mr *MockQuerierMockRecorder) GetFriendRequest(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRequest", reflect.TypeOf((*MockQuerier)(nil).GetFriendRequest), ctx, id)
}

// GetFriendRequestByUsers mocks base method.
func (m *MockQuerier) GetFriendRequestByUsers(ctx context.Context, arg dao.GetFriendRequestByUsersParams) (dao.FriendRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRequestByUsers", ctx, arg)
	ret0, _ := ret[0].(dao.FriendRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRequestByUsers indicates an expected call of GetFriendRequestByUsers.
func (mr *MockQuerierMockRecorder) GetFriendRequestByUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRequestByUsers", reflect.TypeOf((*MockQuerier)(nil).GetFriendRequestByUsers), ctx, arg)
}

// GetGroup mocks base method.
func (m *MockQuerier) GetGroup(ctx context.Context, id uint64) (dao.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, id)
	ret0, _ := ret[0].(dao.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockQuerierMockRecorder) GetGroup(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockQuerier)(nil).GetGroup), ctx, id)
}

// GetGroupUser mocks base method.
func (m *MockQuerier) GetGroupUser(ctx context.Context, arg dao.GetGroupUserParams) (dao.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupUser", ctx, arg)
	ret0, _ := ret[0].(dao.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupUser indicates an expected call of GetGroupUser.
func (mr *MockQuerierMockRecorder) GetGroupUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUser", reflect.TypeOf((*MockQuerier)(nil).GetGroupUser), ctx, arg)
}

// GetGroupUsers mocks base method.
func (m *MockQuerier) GetGroupUsers(ctx context.Context, groupID uint64) ([]dao.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupUsers", ctx, groupID)
	ret0, _ := ret[0].([]dao.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupUsers indicates an expected call of GetGroupUsers.
func (mr *MockQuerierMockRecorder) GetGroupUsers(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockQuerier)(nil).GetGroupUsers), ctx, groupID)
}

// GetMessage mocks base method.
func (m *MockQuerier) GetMessage(ctx context.Context, id uint64) (dao.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, id)
	ret0, _ := ret[0].(dao.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockQuerierMockRecorder) GetMessage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockQuerier)(nil).GetMessage), ctx, id)
}

// GetOnlineDevices mocks base method.
func (m *MockQuerier) GetOnlineDevices(ctx context.Context) ([]dao.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineDevices", ctx)
	ret0, _ := ret[0].([]dao.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineDevices indicates an expected call of GetOnlineDevices.
func (mr *MockQuerierMockRecorder) GetOnlineDevices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineDevices", reflect.TypeOf((*MockQuerier)(nil).GetOnlineDevices), ctx)
}

// GetOrCreateSeq mocks base method.
func (m *MockQuerier) GetOrCreateSeq(ctx context.Context, arg dao.GetOrCreateSeqParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateSeq", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateSeq indicates an expected call of GetOrCreateSeq.
func (mr *MockQuerierMockRecorder) GetOrCreateSeq(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSeq", reflect.TypeOf((*MockQuerier)(nil).GetOrCreateSeq), ctx, arg)
}

// GetPendingFriendRequests mocks base method.
func (m *MockQuerier) GetPendingFriendRequests(ctx context.Context, recipientID uint64) ([]dao.FriendRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingFriendRequests", ctx, recipientID)
	ret0, _ := ret[0].([]dao.FriendRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingFriendRequests indicates an expected call of GetPendingFriendRequests.
func (mr *MockQuerierMockRecorder) GetPendingFriendRequests(ctx, recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingFriendRequests", reflect.TypeOf((*MockQuerier)(nil).GetPendingFriendRequests), ctx, recipientID)
}

// GetReceivedFriendRequests mocks base method.
func (m *MockQuerier) GetReceivedFriendRequests(ctx context.Context, arg dao.GetReceivedFriendRequestsParams) ([]dao.FriendRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedFriendRequests", ctx, arg)
	ret0, _ := ret[0].([]dao.FriendRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedFriendRequests indicates an expected call of GetReceivedFriendRequests.
func (mr *MockQuerierMockRecorder) GetReceivedFriendRequests(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedFriendRequests", reflect.TypeOf((*MockQuerier)(nil).GetReceivedFriendRequests), ctx, arg)
}

// GetSentFriendRequests mocks base method.
func (m *MockQuerier) GetSentFriendRequests(ctx context.Context, arg dao.GetSentFriendRequestsParams) ([]dao.FriendRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentFriendRequests", ctx, arg)
	ret0, _ := ret[0].([]dao.FriendRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentFriendRequests indicates an expected call of GetSentFriendRequests.
func (mr *MockQuerierMockRecorder) GetSentFriendRequests(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentFriendRequests", reflect.TypeOf((*MockQuerier)(nil).GetSentFriendRequests), ctx, arg)
}

// GetSeq mocks base method.
func (m *MockQuerier) GetSeq(ctx context.Context, arg dao.GetSeqParams) (dao.Seq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeq", ctx, arg)
	ret0, _ := ret[0].(dao.Seq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeq indicates an expected call of GetSeq.
func (mr *MockQuerierMockRecorder) GetSeq(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeq", reflect.TypeOf((*MockQuerier)(nil).GetSeq), ctx, arg)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(ctx context.Context, id uint64) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email sql.NullString) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserByEmailForAuth mocks base method.
func (m *MockQuerier) GetUserByEmailForAuth(ctx context.Context, email sql.NullString) (dao.GetUserByEmailForAuthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailForAuth", ctx, email)
	ret0, _ := ret[0].(dao.GetUserByEmailForAuthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailForAuth indicates an expected call of GetUserByEmailForAuth.
func (mr *MockQuerierMockRecorder) GetUserByEmailForAuth(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailForAuth", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmailForAuth), ctx, email)
}

// GetUserByPhone mocks base method.
func (m *MockQuerier) GetUserByPhone(ctx context.Context, phoneNumber sql.NullString) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", ctx, phoneNumber)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockQuerierMockRecorder) GetUserByPhone(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockQuerier)(nil).GetUserByPhone), ctx, phoneNumber)
}

// GetUserByPhoneForAuth mocks base method.
func (m *MockQuerier) GetUserByPhoneForAuth(ctx context.Context, phoneNumber sql.NullString) (dao.GetUserByPhoneForAuthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhoneForAuth", ctx, phoneNumber)
	ret0, _ := ret[0].(dao.GetUserByPhoneForAuthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhoneForAuth indicates an expected call of GetUserByPhoneForAuth.
func (mr *MockQuerierMockRecorder) GetUserByPhoneForAuth(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhoneForAuth", reflect.TypeOf((*MockQuerier)(nil).GetUserByPhoneForAuth), ctx, phoneNumber)
}

// GetUserByUsernameForAuth mocks base method.
func (m *MockQuerier) GetUserByUsernameForAuth(ctx context.Context, username string) (dao.GetUserByUsernameForAuthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameForAuth", ctx, username)
	ret0, _ := ret[0].(dao.GetUserByUsernameForAuthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameForAuth indicates an expected call of GetUserByUsernameForAuth.
func (mr *MockQuerierMockRecorder) GetUserByUsernameForAuth(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameForAuth", reflect.TypeOf((*MockQuerier)(nil).GetUserByUsernameForAuth), ctx, username)
}

// GetUserDevices mocks base method.
func (m *MockQuerier) GetUserDevices(ctx context.Context, userID uint64) ([]dao.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevices", ctx, userID)
	ret0, _ := ret[0].([]dao.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevices indicates an expected call of GetUserDevices.
func (mr *MockQuerierMockRecorder) GetUserDevices(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevices", reflect.TypeOf((*MockQuerier)(nil).GetUserDevices), ctx, userID)
}

// GetUserFriends mocks base method.
func (m *MockQuerier) GetUserFriends(ctx context.Context, userID uint64) ([]dao.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFriends", ctx, userID)
	ret0, _ := ret[0].([]dao.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFriends indicates an expected call of GetUserFriends.
func (mr *MockQuerierMockRecorder) GetUserFriends(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFriends", reflect.TypeOf((*MockQuerier)(nil).GetUserFriends), ctx, userID)
}

// GetUserFriendsByCategory mocks base method.
func (m *MockQuerier) GetUserFriendsByCategory(ctx context.Context, arg dao.GetUserFriendsByCategoryParams) ([]dao.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFriendsByCategory", ctx, arg)
	ret0, _ := ret[0].([]dao.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFriendsByCategory indicates an expected call of GetUserFriendsByCategory.
func (mr *MockQuerierMockRecorder) GetUserFriendsByCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFriendsByCategory", reflect.TypeOf((*MockQuerier)(nil).GetUserFriendsByCategory), ctx, arg)
}

// GetUserGroups mocks base method.
func (m *MockQuerier) GetUserGroups(ctx context.Context, userID uint64) ([]dao.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", ctx, userID)
	ret0, _ := ret[0].([]dao.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockQuerierMockRecorder) GetUserGroups(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockQuerier)(nil).GetUserGroups), ctx, userID)
}

// GetUserLatestSeq mocks base method.
func (m *MockQuerier) GetUserLatestSeq(ctx context.Context, userID uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLatestSeq", ctx, userID)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLatestSeq indicates an expected call of GetUserLatestSeq.
func (mr *MockQuerierMockRecorder) GetUserLatestSeq(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLatestSeq", reflect.TypeOf((*MockQuerier)(nil).GetUserLatestSeq), ctx, userID)
}

// GetUserMessage mocks base method.
func (m *MockQuerier) GetUserMessage(ctx context.Context, arg dao.GetUserMessageParams) (dao.UserMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMessage", ctx, arg)
	ret0, _ := ret[0].(dao.UserMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMessage indicates an expected call of GetUserMessage.
func (mr *MockQuerierMockRecorder) GetUserMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMessage", reflect.TypeOf((*MockQuerier)(nil).GetUserMessage), ctx, arg)
}

// GetUserMessages mocks base method.
func (m *MockQuerier) GetUserMessages(ctx context.Context, arg dao.GetUserMessagesParams) ([]dao.GetUserMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMessages", ctx, arg)
	ret0, _ := ret[0].([]dao.GetUserMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMessages indicates an expected call of GetUserMessages.
func (mr *MockQuerierMockRecorder) GetUserMessages(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMessages", reflect.TypeOf((*MockQuerier)(nil).GetUserMessages), ctx, arg)
}

// IgnoreFriendRequest mocks base method.
func (m *MockQuerier) IgnoreFriendRequest(ctx context.Context, arg dao.IgnoreFriendRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreFriendRequest", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgnoreFriendRequest indicates an expected call of IgnoreFriendRequest.
func (mr *MockQuerierMockRecorder) IgnoreFriendRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreFriendRequest", reflect.TypeOf((*MockQuerier)(nil).IgnoreFriendRequest), ctx, arg)
}

// IncrementSeq mocks base method.
func (m *MockQuerier) IncrementSeq(ctx context.Context, arg dao.IncrementSeqParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementSeq", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementSeq indicates an expected call of IncrementSeq.
func (mr *MockQuerierMockRecorder) IncrementSeq(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSeq", reflect.TypeOf((*MockQuerier)(nil).IncrementSeq), ctx, arg)
}

// ListGroups mocks base method.
func (m *MockQuerier) ListGroups(ctx context.Context, arg dao.ListGroupsParams) ([]dao.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", ctx, arg)
	ret0, _ := ret[0].([]dao.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockQuerierMockRecorder) ListGroups(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockQuerier)(nil).ListGroups), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context, arg dao.ListUsersParams) ([]dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx, arg)
}

// RejectFriendRequest mocks base method.
func (m *MockQuerier) RejectFriendRequest(ctx context.Context, arg dao.RejectFriendRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectFriendRequest", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectFriendRequest indicates an expected call of RejectFriendRequest.
func (mr *MockQuerierMockRecorder) RejectFriendRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectFriendRequest", reflect.TypeOf((*MockQuerier)(nil).RejectFriendRequest), ctx, arg)
}

// UnblockFriend mocks base method.
func (m *MockQuerier) UnblockFriend(ctx context.Context, arg dao.UnblockFriendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockFriend", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockFriend indicates an expected call of UnblockFriend.
func (mr *MockQuerierMockRecorder) UnblockFriend(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockFriend", reflect.TypeOf((*MockQuerier)(nil).UnblockFriend), ctx, arg)
}

// UpdateDeviceOffline mocks base method.
func (m *MockQuerier) UpdateDeviceOffline(ctx context.Context, arg dao.UpdateDeviceOfflineParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceOffline", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceOffline indicates an expected call of UpdateDeviceOffline.
func (mr *MockQuerierMockRecorder) UpdateDeviceOffline(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceOffline", reflect.TypeOf((*MockQuerier)(nil).UpdateDeviceOffline), ctx, arg)
}

// UpdateDeviceStatus mocks base method.
func (m *MockQuerier) UpdateDeviceStatus(ctx context.Context, arg dao.UpdateDeviceStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceStatus indicates an expected call of UpdateDeviceStatus.
func (mr *MockQuerierMockRecorder) UpdateDeviceStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateDeviceStatus), ctx, arg)
}

// UpdateFriendCategory mocks base method.
func (m *MockQuerier) UpdateFriendCategory(ctx context.Context, arg dao.UpdateFriendCategoryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendCategory", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFriendCategory indicates an expected call of UpdateFriendCategory.
func (mr *MockQuerierMockRecorder) UpdateFriendCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendCategory", reflect.TypeOf((*MockQuerier)(nil).UpdateFriendCategory), ctx, arg)
}

// UpdateFriendRemark mocks base method.
func (m *MockQuerier) UpdateFriendRemark(ctx context.Context, arg dao.UpdateFriendRemarkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendRemark", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFriendRemark indicates an expected call of UpdateFriendRemark.
func (mr *MockQuerierMockRecorder) UpdateFriendRemark(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendRemark", reflect.TypeOf((*MockQuerier)(nil).UpdateFriendRemark), ctx, arg)
}

// UpdateFriendRequestStatus mocks base method.
func (m *MockQuerier) UpdateFriendRequestStatus(ctx context.Context, arg dao.UpdateFriendRequestStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendRequestStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFriendRequestStatus indicates an expected call of UpdateFriendRequestStatus.
func (mr *MockQuerierMockRecorder) UpdateFriendRequestStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendRequestStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateFriendRequestStatus), ctx, arg)
}

// UpdateGroup mocks base method.
func (m *MockQuerier) UpdateGroup(ctx context.Context, arg dao.UpdateGroupParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockQuerierMockRecorder) UpdateGroup(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockQuerier)(nil).UpdateGroup), ctx, arg)
}

// UpdateGroupUserNum mocks base method.
func (m *MockQuerier) UpdateGroupUserNum(ctx context.Context, arg dao.UpdateGroupUserNumParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupUserNum", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupUserNum indicates an expected call of UpdateGroupUserNum.
func (mr *MockQuerierMockRecorder) UpdateGroupUserNum(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupUserNum", reflect.TypeOf((*MockQuerier)(nil).UpdateGroupUserNum), ctx, arg)
}

// UpdateGroupUserType mocks base method.
func (m *MockQuerier) UpdateGroupUserType(ctx context.Context, arg dao.UpdateGroupUserTypeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupUserType", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupUserType indicates an expected call of UpdateGroupUserType.
func (mr *MockQuerierMockRecorder) UpdateGroupUserType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupUserType", reflect.TypeOf((*MockQuerier)(nil).UpdateGroupUserType), ctx, arg)
}

// UpdateMessageStatus mocks base method.
func (m *MockQuerier) UpdateMessageStatus(ctx context.Context, arg dao.UpdateMessageStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageStatus indicates an expected call of UpdateMessageStatus.
func (mr *MockQuerierMockRecorder) UpdateMessageStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateMessageStatus), ctx, arg)
}

// UpdateSeq mocks base method.
func (m *MockQuerier) UpdateSeq(ctx context.Context, arg dao.UpdateSeqParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeq", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeq indicates an expected call of UpdateSeq.
func (mr *MockQuerierMockRecorder) UpdateSeq(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeq", reflect.TypeOf((*MockQuerier)(nil).UpdateSeq), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(ctx context.Context, arg dao.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, arg)
}

// UpdateUserAvatar mocks base method.
func (m *MockQuerier) UpdateUserAvatar(ctx context.Context, arg dao.UpdateUserAvatarParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAvatar", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAvatar indicates an expected call of UpdateUserAvatar.
func (mr *MockQuerierMockRecorder) UpdateUserAvatar(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAvatar", reflect.TypeOf((*MockQuerier)(nil).UpdateUserAvatar), ctx, arg)
}

// UpdateUserPassword mocks base method.
func (m *MockQuerier) UpdateUserPassword(ctx context.Context, arg dao.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockQuerierMockRecorder) UpdateUserPassword(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockQuerier)(nil).UpdateUserPassword), ctx, arg)
}

// UserExistsByUsername mocks base method.
func (m *MockQuerier) UserExistsByUsername(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsByUsername", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExistsByUsername indicates an expected call of UserExistsByUsername.
func (mr *MockQuerierMockRecorder) UserExistsByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsByUsername", reflect.TypeOf((*MockQuerier)(nil).UserExistsByUsername), ctx, username)
}
