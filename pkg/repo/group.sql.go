// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: group.sql

package repo

import (
	"context"
	"database/sql"
	"time"
)

const createGroup = `-- name: CreateGroup :execresult
INSERT INTO ` + "`" + `group` + "`" + ` (
    created_at, updated_at, name, avatar_url, introduction, user_num, extra
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

// 创建群组
func (q *Queries) CreateGroup(ctx context.Context, createdAt time.Time, updatedAt time.Time, name string, avatarUrl string, introduction string, userNum int32, extra string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGroup,
		createdAt,
		updatedAt,
		name,
		avatarUrl,
		introduction,
		userNum,
		extra,
	)
}

const createGroupUser = `-- name: CreateGroupUser :exec
INSERT INTO ` + "`" + `group_user` + "`" + ` (
    group_id, user_id, created_at, updated_at, member_type, remarks, extra, status
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
)
`

// 添加群组成员
func (q *Queries) CreateGroupUser(ctx context.Context, groupID uint64, userID uint64, createdAt time.Time, updatedAt time.Time, memberType int8, remarks string, extra string, status int8) error {
	_, err := q.db.ExecContext(ctx, createGroupUser,
		groupID,
		userID,
		createdAt,
		updatedAt,
		memberType,
		remarks,
		extra,
		status,
	)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM ` + "`" + `group` + "`" + ` 
WHERE id = ?
`

// 删除群组
func (q *Queries) DeleteGroup(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const deleteGroupUser = `-- name: DeleteGroupUser :exec
DELETE FROM ` + "`" + `group_user` + "`" + ` 
WHERE group_id = ? AND user_id = ?
`

// 移除群组成员
func (q *Queries) DeleteGroupUser(ctx context.Context, groupID uint64, userID uint64) error {
	_, err := q.db.ExecContext(ctx, deleteGroupUser, groupID, userID)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, created_at, updated_at, name, avatar_url, introduction, user_num, extra FROM ` + "`" + `group` + "`" + ` 
WHERE id = ? LIMIT 1
`

// 根据群组ID获取群组信息
func (q *Queries) GetGroup(ctx context.Context, id uint64) (*Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.AvatarUrl,
		&i.Introduction,
		&i.UserNum,
		&i.Extra,
	)
	return &i, err
}

const getGroupUser = `-- name: GetGroupUser :one
SELECT group_id, user_id, created_at, updated_at, member_type, remarks, extra, status FROM ` + "`" + `group_user` + "`" + ` 
WHERE group_id = ? AND user_id = ? 
LIMIT 1
`

// 获取群组成员信息
func (q *Queries) GetGroupUser(ctx context.Context, groupID uint64, userID uint64) (*GroupUser, error) {
	row := q.db.QueryRowContext(ctx, getGroupUser, groupID, userID)
	var i GroupUser
	err := row.Scan(
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MemberType,
		&i.Remarks,
		&i.Extra,
		&i.Status,
	)
	return &i, err
}

const getGroupUsers = `-- name: GetGroupUsers :many
SELECT group_id, user_id, created_at, updated_at, member_type, remarks, extra, status FROM ` + "`" + `group_user` + "`" + ` 
WHERE group_id = ?
ORDER BY member_type ASC, created_at ASC
`

// 获取群组所有成员
func (q *Queries) GetGroupUsers(ctx context.Context, groupID uint64) ([]*GroupUser, error) {
	rows, err := q.db.QueryContext(ctx, getGroupUsers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GroupUser
	for rows.Next() {
		var i GroupUser
		if err := rows.Scan(
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MemberType,
			&i.Remarks,
			&i.Extra,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroups = `-- name: GetUserGroups :many
SELECT group_id, user_id, created_at, updated_at, member_type, remarks, extra, status FROM ` + "`" + `group_user` + "`" + ` 
WHERE user_id = ?
ORDER BY created_at DESC
`

// 获取用户参与的所有群组
func (q *Queries) GetUserGroups(ctx context.Context, userID uint64) ([]*GroupUser, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroups, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GroupUser
	for rows.Next() {
		var i GroupUser
		if err := rows.Scan(
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MemberType,
			&i.Remarks,
			&i.Extra,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroups = `-- name: ListGroups :many
SELECT id, created_at, updated_at, name, avatar_url, introduction, user_num, extra FROM ` + "`" + `group` + "`" + ` 
ORDER BY created_at DESC 
LIMIT ? OFFSET ?
`

// 获取群组列表
func (q *Queries) ListGroups(ctx context.Context, limit int32, offset int32) ([]*Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.AvatarUrl,
			&i.Introduction,
			&i.UserNum,
			&i.Extra,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE ` + "`" + `group` + "`" + ` 
SET updated_at = ?, name = ?, avatar_url = ?, introduction = ?, extra = ?
WHERE id = ?
`

// 更新群组信息
func (q *Queries) UpdateGroup(ctx context.Context, updatedAt time.Time, name string, avatarUrl string, introduction string, extra string, iD uint64) error {
	_, err := q.db.ExecContext(ctx, updateGroup,
		updatedAt,
		name,
		avatarUrl,
		introduction,
		extra,
		iD,
	)
	return err
}

const updateGroupUserNum = `-- name: UpdateGroupUserNum :exec
UPDATE ` + "`" + `group` + "`" + ` 
SET updated_at = ?, user_num = ?
WHERE id = ?
`

// 更新群组人数
func (q *Queries) UpdateGroupUserNum(ctx context.Context, updatedAt time.Time, userNum int32, iD uint64) error {
	_, err := q.db.ExecContext(ctx, updateGroupUserNum, updatedAt, userNum, iD)
	return err
}

const updateGroupUserType = `-- name: UpdateGroupUserType :exec
UPDATE ` + "`" + `group_user` + "`" + ` 
SET updated_at = ?, member_type = ?
WHERE group_id = ? AND user_id = ?
`

// 更新群组成员类型
func (q *Queries) UpdateGroupUserType(ctx context.Context, updatedAt time.Time, memberType int8, groupID uint64, userID uint64) error {
	_, err := q.db.ExecContext(ctx, updateGroupUserType,
		updatedAt,
		memberType,
		groupID,
		userID,
	)
	return err
}
