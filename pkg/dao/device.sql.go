// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: device.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createDevice = `-- name: CreateDevice :execresult
INSERT INTO ` + "`" + `device` + "`" + ` (
    created_at, updated_at, user_id, type, brand, model, 
    system_version, sdk_version, status, conn_addr, client_addr
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateDeviceParams struct {
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	UserID        uint64    `json:"user_id"`
	Type          int8      `json:"type"`
	Brand         string    `json:"brand"`
	Model         string    `json:"model"`
	SystemVersion string    `json:"system_version"`
	SdkVersion    string    `json:"sdk_version"`
	Status        int8      `json:"status"`
	ConnAddr      string    `json:"conn_addr"`
	ClientAddr    string    `json:"client_addr"`
}

// 创建设备
func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDevice,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.Type,
		arg.Brand,
		arg.Model,
		arg.SystemVersion,
		arg.SdkVersion,
		arg.Status,
		arg.ConnAddr,
		arg.ClientAddr,
	)
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM ` + "`" + `device` + "`" + ` 
WHERE id = ?
`

// 删除设备
func (q *Queries) DeleteDevice(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT id, created_at, updated_at, user_id, type, brand, model, system_version, sdk_version, status, conn_addr, client_addr FROM ` + "`" + `device` + "`" + ` 
WHERE id = ? LIMIT 1
`

// 根据设备ID获取设备信息
func (q *Queries) GetDevice(ctx context.Context, id uint64) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Type,
		&i.Brand,
		&i.Model,
		&i.SystemVersion,
		&i.SdkVersion,
		&i.Status,
		&i.ConnAddr,
		&i.ClientAddr,
	)
	return i, err
}

const getDeviceByUserAndType = `-- name: GetDeviceByUserAndType :one
SELECT id, created_at, updated_at, user_id, type, brand, model, system_version, sdk_version, status, conn_addr, client_addr FROM ` + "`" + `device` + "`" + ` 
WHERE user_id = ? AND type = ? 
LIMIT 1
`

type GetDeviceByUserAndTypeParams struct {
	UserID uint64 `json:"user_id"`
	Type   int8   `json:"type"`
}

// 根据用户ID和设备类型获取设备
func (q *Queries) GetDeviceByUserAndType(ctx context.Context, arg GetDeviceByUserAndTypeParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceByUserAndType, arg.UserID, arg.Type)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Type,
		&i.Brand,
		&i.Model,
		&i.SystemVersion,
		&i.SdkVersion,
		&i.Status,
		&i.ConnAddr,
		&i.ClientAddr,
	)
	return i, err
}

const getOnlineDevices = `-- name: GetOnlineDevices :many
SELECT id, created_at, updated_at, user_id, type, brand, model, system_version, sdk_version, status, conn_addr, client_addr FROM ` + "`" + `device` + "`" + ` 
WHERE status = 1
ORDER BY updated_at DESC
`

// 获取在线设备列表
func (q *Queries) GetOnlineDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getOnlineDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Type,
			&i.Brand,
			&i.Model,
			&i.SystemVersion,
			&i.SdkVersion,
			&i.Status,
			&i.ConnAddr,
			&i.ClientAddr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDevices = `-- name: GetUserDevices :many
SELECT id, created_at, updated_at, user_id, type, brand, model, system_version, sdk_version, status, conn_addr, client_addr FROM ` + "`" + `device` + "`" + ` 
WHERE user_id = ?
ORDER BY updated_at DESC
`

// 获取用户的所有设备
func (q *Queries) GetUserDevices(ctx context.Context, userID uint64) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getUserDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Type,
			&i.Brand,
			&i.Model,
			&i.SystemVersion,
			&i.SdkVersion,
			&i.Status,
			&i.ConnAddr,
			&i.ClientAddr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeviceOffline = `-- name: UpdateDeviceOffline :exec
UPDATE ` + "`" + `device` + "`" + ` 
SET updated_at = ?, status = 0, conn_addr = '', client_addr = ''
WHERE id = ?
`

type UpdateDeviceOfflineParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	ID        uint64    `json:"id"`
}

// 设置设备离线
func (q *Queries) UpdateDeviceOffline(ctx context.Context, arg UpdateDeviceOfflineParams) error {
	_, err := q.db.ExecContext(ctx, updateDeviceOffline, arg.UpdatedAt, arg.ID)
	return err
}

const updateDeviceStatus = `-- name: UpdateDeviceStatus :exec
UPDATE ` + "`" + `device` + "`" + ` 
SET updated_at = ?, status = ?, conn_addr = ?, client_addr = ?
WHERE id = ?
`

type UpdateDeviceStatusParams struct {
	UpdatedAt  time.Time `json:"updated_at"`
	Status     int8      `json:"status"`
	ConnAddr   string    `json:"conn_addr"`
	ClientAddr string    `json:"client_addr"`
	ID         uint64    `json:"id"`
}

// 更新设备在线状态
func (q *Queries) UpdateDeviceStatus(ctx context.Context, arg UpdateDeviceStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateDeviceStatus,
		arg.UpdatedAt,
		arg.Status,
		arg.ConnAddr,
		arg.ClientAddr,
		arg.ID,
	)
	return err
}
