// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: outbox.sql

package dao

import (
	"context"
	"encoding/json"
)

const getPendingOutboxEvents = `-- name: GetPendingOutboxEvents :many
SELECT id, topic, payload FROM outbox_events
WHERE status = 'pending' AND (next_delivery_at IS NULL OR next_delivery_at <= CURRENT_TIMESTAMP)
ORDER BY id ASC
LIMIT ?
`

type GetPendingOutboxEventsRow struct {
	ID      uint64          `json:"id"`
	Topic   string          `json:"topic"`
	Payload json.RawMessage `json:"payload"`
}

func (q *Queries) GetPendingOutboxEvents(ctx context.Context, limit int32) ([]GetPendingOutboxEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPendingOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPendingOutboxEventsRow{}
	for rows.Next() {
		var i GetPendingOutboxEventsRow
		if err := rows.Scan(&i.ID, &i.Topic, &i.Payload); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOutboxEvent = `-- name: InsertOutboxEvent :exec
INSERT INTO outbox_events (topic, payload, status, retry_count, next_delivery_at)
VALUES (?, ?, 'pending', 0, NULL)
`

type InsertOutboxEventParams struct {
	Topic   string          `json:"topic"`
	Payload json.RawMessage `json:"payload"`
}

func (q *Queries) InsertOutboxEvent(ctx context.Context, arg InsertOutboxEventParams) error {
	_, err := q.db.ExecContext(ctx, insertOutboxEvent, arg.Topic, arg.Payload)
	return err
}

const markOutboxEventFailed = `-- name: MarkOutboxEventFailed :exec
UPDATE outbox_events SET status = 'failed', retry_count = retry_count + 1, next_delivery_at = DATE_ADD(CURRENT_TIMESTAMP, INTERVAL 5 SECOND)
WHERE id = ?
`

func (q *Queries) MarkOutboxEventFailed(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, markOutboxEventFailed, id)
	return err
}

const markOutboxEventSent = `-- name: MarkOutboxEventSent :exec
UPDATE outbox_events SET status = 'sent', updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) MarkOutboxEventSent(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, markOutboxEventSent, id)
	return err
}
