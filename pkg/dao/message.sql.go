// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: message.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createMessage = `-- name: CreateMessage :execresult
INSERT INTO ` + "`" + `message` + "`" + ` (
    created_at, updated_at, request_id, code, content, status
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateMessageParams struct {
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RequestID int64     `json:"request_id"`
	Code      int32     `json:"code"`
	Content   []byte    `json:"content"`
	Status    int8      `json:"status"`
}

// 创建消息
func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMessage,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RequestID,
		arg.Code,
		arg.Content,
		arg.Status,
	)
}

const createUserMessage = `-- name: CreateUserMessage :exec
INSERT INTO ` + "`" + `user_message` + "`" + ` (
    user_id, seq, created_at, updated_at, message_id
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateUserMessageParams struct {
	UserID    uint64    `json:"user_id"`
	Seq       uint64    `json:"seq"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	MessageID uint64    `json:"message_id"`
}

// 创建用户消息关联
func (q *Queries) CreateUserMessage(ctx context.Context, arg CreateUserMessageParams) error {
	_, err := q.db.ExecContext(ctx, createUserMessage,
		arg.UserID,
		arg.Seq,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.MessageID,
	)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM ` + "`" + `message` + "`" + ` 
WHERE id = ?
`

// 删除消息
func (q *Queries) DeleteMessage(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const deleteUserMessage = `-- name: DeleteUserMessage :exec
DELETE FROM ` + "`" + `user_message` + "`" + ` 
WHERE user_id = ? AND seq = ?
`

type DeleteUserMessageParams struct {
	UserID uint64 `json:"user_id"`
	Seq    uint64 `json:"seq"`
}

// 删除用户消息关联
func (q *Queries) DeleteUserMessage(ctx context.Context, arg DeleteUserMessageParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserMessage, arg.UserID, arg.Seq)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, created_at, updated_at, request_id, code, content, status FROM ` + "`" + `message` + "`" + ` 
WHERE id = ? LIMIT 1
`

// 根据消息ID获取消息
func (q *Queries) GetMessage(ctx context.Context, id uint64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RequestID,
		&i.Code,
		&i.Content,
		&i.Status,
	)
	return i, err
}

const getUserLatestSeq = `-- name: GetUserLatestSeq :one
SELECT COALESCE(MAX(seq), 0) as latest_seq FROM ` + "`" + `user_message` + "`" + ` 
WHERE user_id = ?
`

// 获取用户最新的消息序列号
func (q *Queries) GetUserLatestSeq(ctx context.Context, userID uint64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getUserLatestSeq, userID)
	var latest_seq interface{}
	err := row.Scan(&latest_seq)
	return latest_seq, err
}

const getUserMessage = `-- name: GetUserMessage :one
SELECT user_id, seq, created_at, updated_at, message_id FROM ` + "`" + `user_message` + "`" + ` 
WHERE user_id = ? AND seq = ? 
LIMIT 1
`

type GetUserMessageParams struct {
	UserID uint64 `json:"user_id"`
	Seq    uint64 `json:"seq"`
}

// 获取用户消息
func (q *Queries) GetUserMessage(ctx context.Context, arg GetUserMessageParams) (UserMessage, error) {
	row := q.db.QueryRowContext(ctx, getUserMessage, arg.UserID, arg.Seq)
	var i UserMessage
	err := row.Scan(
		&i.UserID,
		&i.Seq,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MessageID,
	)
	return i, err
}

const getUserMessages = `-- name: GetUserMessages :many
SELECT um.user_id, um.seq, um.created_at, um.updated_at, um.message_id, m.request_id, m.code, m.content, m.status, m.created_at as message_created_at
FROM ` + "`" + `user_message` + "`" + ` um
JOIN ` + "`" + `message` + "`" + ` m ON um.message_id = m.id
WHERE um.user_id = ? AND um.seq > ?
ORDER BY um.seq ASC
LIMIT ?
`

type GetUserMessagesParams struct {
	UserID uint64 `json:"user_id"`
	Seq    uint64 `json:"seq"`
	Limit  int32  `json:"limit"`
}

type GetUserMessagesRow struct {
	UserID           uint64    `json:"user_id"`
	Seq              uint64    `json:"seq"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
	MessageID        uint64    `json:"message_id"`
	RequestID        int64     `json:"request_id"`
	Code             int32     `json:"code"`
	Content          []byte    `json:"content"`
	Status           int8      `json:"status"`
	MessageCreatedAt time.Time `json:"message_created_at"`
}

// 获取用户消息列表
func (q *Queries) GetUserMessages(ctx context.Context, arg GetUserMessagesParams) ([]GetUserMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserMessages, arg.UserID, arg.Seq, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserMessagesRow{}
	for rows.Next() {
		var i GetUserMessagesRow
		if err := rows.Scan(
			&i.UserID,
			&i.Seq,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MessageID,
			&i.RequestID,
			&i.Code,
			&i.Content,
			&i.Status,
			&i.MessageCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE ` + "`" + `message` + "`" + ` 
SET updated_at = ?, status = ?
WHERE id = ?
`

type UpdateMessageStatusParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	Status    int8      `json:"status"`
	ID        uint64    `json:"id"`
}

// 更新消息状态（如撤回消息）
func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMessageStatus, arg.UpdatedAt, arg.Status, arg.ID)
	return err
}
