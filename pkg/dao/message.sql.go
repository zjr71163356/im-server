// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createMessage = `-- name: CreateMessage :execresult
INSERT INTO ` + "`" + `message` + "`" + ` (
    created_at, updated_at, request_id, code, content, status
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

// 创建消息
func (q *Queries) CreateMessage(ctx context.Context, createdAt time.Time, updatedAt time.Time, requestID int64, code int32, content []byte, status int8) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMessage,
		createdAt,
		updatedAt,
		requestID,
		code,
		content,
		status,
	)
}

const createUserMessage = `-- name: CreateUserMessage :exec
INSERT INTO ` + "`" + `user_message` + "`" + ` (
    user_id, seq, created_at, updated_at, message_id
) VALUES (
    ?, ?, ?, ?, ?
)
`

// 创建用户消息关联
func (q *Queries) CreateUserMessage(ctx context.Context, userID uint64, seq uint64, createdAt time.Time, updatedAt time.Time, messageID uint64) error {
	_, err := q.db.ExecContext(ctx, createUserMessage,
		userID,
		seq,
		createdAt,
		updatedAt,
		messageID,
	)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM ` + "`" + `message` + "`" + ` 
WHERE id = ?
`

// 删除消息
func (q *Queries) DeleteMessage(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const deleteUserMessage = `-- name: DeleteUserMessage :exec
DELETE FROM ` + "`" + `user_message` + "`" + ` 
WHERE user_id = ? AND seq = ?
`

// 删除用户消息关联
func (q *Queries) DeleteUserMessage(ctx context.Context, userID uint64, seq uint64) error {
	_, err := q.db.ExecContext(ctx, deleteUserMessage, userID, seq)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, created_at, updated_at, request_id, code, content, status FROM ` + "`" + `message` + "`" + ` 
WHERE id = ? LIMIT 1
`

// 根据消息ID获取消息
func (q *Queries) GetMessage(ctx context.Context, id uint64) (*Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RequestID,
		&i.Code,
		&i.Content,
		&i.Status,
	)
	return &i, err
}

const getUserLatestSeq = `-- name: GetUserLatestSeq :one
SELECT COALESCE(MAX(seq), 0) as latest_seq FROM ` + "`" + `user_message` + "`" + ` 
WHERE user_id = ?
`

// 获取用户最新的消息序列号
func (q *Queries) GetUserLatestSeq(ctx context.Context, userID uint64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getUserLatestSeq, userID)
	var latest_seq interface{}
	err := row.Scan(&latest_seq)
	return latest_seq, err
}

const getUserMessage = `-- name: GetUserMessage :one
SELECT user_id, seq, created_at, updated_at, message_id FROM ` + "`" + `user_message` + "`" + ` 
WHERE user_id = ? AND seq = ? 
LIMIT 1
`

// 获取用户消息
func (q *Queries) GetUserMessage(ctx context.Context, userID uint64, seq uint64) (*UserMessage, error) {
	row := q.db.QueryRowContext(ctx, getUserMessage, userID, seq)
	var i UserMessage
	err := row.Scan(
		&i.UserID,
		&i.Seq,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MessageID,
	)
	return &i, err
}

const getUserMessages = `-- name: GetUserMessages :many
SELECT um.user_id, um.seq, um.created_at, um.updated_at, um.message_id, m.request_id, m.code, m.content, m.status, m.created_at as message_created_at
FROM ` + "`" + `user_message` + "`" + ` um
JOIN ` + "`" + `message` + "`" + ` m ON um.message_id = m.id
WHERE um.user_id = ? AND um.seq > ?
ORDER BY um.seq ASC
LIMIT ?
`

type GetUserMessagesRow struct {
	UserID           uint64    `db:"user_id" json:"user_id"`
	Seq              uint64    `db:"seq" json:"seq"`
	CreatedAt        time.Time `db:"created_at" json:"created_at"`
	UpdatedAt        time.Time `db:"updated_at" json:"updated_at"`
	MessageID        uint64    `db:"message_id" json:"message_id"`
	RequestID        int64     `db:"request_id" json:"request_id"`
	Code             int32     `db:"code" json:"code"`
	Content          []byte    `db:"content" json:"content"`
	Status           int8      `db:"status" json:"status"`
	MessageCreatedAt time.Time `db:"message_created_at" json:"message_created_at"`
}

// 获取用户消息列表
func (q *Queries) GetUserMessages(ctx context.Context, userID uint64, seq uint64, limit int32) ([]*GetUserMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserMessages, userID, seq, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUserMessagesRow
	for rows.Next() {
		var i GetUserMessagesRow
		if err := rows.Scan(
			&i.UserID,
			&i.Seq,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MessageID,
			&i.RequestID,
			&i.Code,
			&i.Content,
			&i.Status,
			&i.MessageCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE ` + "`" + `message` + "`" + ` 
SET updated_at = ?, status = ?
WHERE id = ?
`

// 更新消息状态（如撤回消息）
func (q *Queries) UpdateMessageStatus(ctx context.Context, updatedAt time.Time, status int8, iD uint64) error {
	_, err := q.db.ExecContext(ctx, updateMessageStatus, updatedAt, status, iD)
	return err
}
