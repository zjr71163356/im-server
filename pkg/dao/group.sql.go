// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: group.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createGroup = `-- name: CreateGroup :execresult
INSERT INTO ` + "`" + `group` + "`" + ` (
    created_at, updated_at, name, avatar_url, introduction, user_num, extra
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateGroupParams struct {
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Name         string    `json:"name"`
	AvatarUrl    string    `json:"avatar_url"`
	Introduction string    `json:"introduction"`
	UserNum      int32     `json:"user_num"`
	Extra        string    `json:"extra"`
}

// 创建群组
func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGroup,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.AvatarUrl,
		arg.Introduction,
		arg.UserNum,
		arg.Extra,
	)
}

const createGroupUser = `-- name: CreateGroupUser :exec
INSERT INTO ` + "`" + `group_user` + "`" + ` (
    group_id, user_id, created_at, updated_at, member_type, remarks, extra, status
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateGroupUserParams struct {
	GroupID    uint64    `json:"group_id"`
	UserID     uint64    `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	MemberType int8      `json:"member_type"`
	Remarks    string    `json:"remarks"`
	Extra      string    `json:"extra"`
	Status     int8      `json:"status"`
}

// 添加群组成员
func (q *Queries) CreateGroupUser(ctx context.Context, arg CreateGroupUserParams) error {
	_, err := q.db.ExecContext(ctx, createGroupUser,
		arg.GroupID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.MemberType,
		arg.Remarks,
		arg.Extra,
		arg.Status,
	)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM ` + "`" + `group` + "`" + ` 
WHERE id = ?
`

// 删除群组
func (q *Queries) DeleteGroup(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const deleteGroupUser = `-- name: DeleteGroupUser :exec
DELETE FROM ` + "`" + `group_user` + "`" + ` 
WHERE group_id = ? AND user_id = ?
`

type DeleteGroupUserParams struct {
	GroupID uint64 `json:"group_id"`
	UserID  uint64 `json:"user_id"`
}

// 移除群组成员
func (q *Queries) DeleteGroupUser(ctx context.Context, arg DeleteGroupUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupUser, arg.GroupID, arg.UserID)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, created_at, updated_at, name, avatar_url, introduction, user_num, extra FROM ` + "`" + `group` + "`" + ` 
WHERE id = ? LIMIT 1
`

// 根据群组ID获取群组信息
func (q *Queries) GetGroup(ctx context.Context, id uint64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.AvatarUrl,
		&i.Introduction,
		&i.UserNum,
		&i.Extra,
	)
	return i, err
}

const getGroupUser = `-- name: GetGroupUser :one
SELECT group_id, user_id, created_at, updated_at, member_type, remarks, extra, status FROM ` + "`" + `group_user` + "`" + ` 
WHERE group_id = ? AND user_id = ? 
LIMIT 1
`

type GetGroupUserParams struct {
	GroupID uint64 `json:"group_id"`
	UserID  uint64 `json:"user_id"`
}

// 获取群组成员信息
func (q *Queries) GetGroupUser(ctx context.Context, arg GetGroupUserParams) (GroupUser, error) {
	row := q.db.QueryRowContext(ctx, getGroupUser, arg.GroupID, arg.UserID)
	var i GroupUser
	err := row.Scan(
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MemberType,
		&i.Remarks,
		&i.Extra,
		&i.Status,
	)
	return i, err
}

const getGroupUsers = `-- name: GetGroupUsers :many
SELECT group_id, user_id, created_at, updated_at, member_type, remarks, extra, status FROM ` + "`" + `group_user` + "`" + ` 
WHERE group_id = ?
ORDER BY member_type ASC, created_at ASC
`

// 获取群组所有成员
func (q *Queries) GetGroupUsers(ctx context.Context, groupID uint64) ([]GroupUser, error) {
	rows, err := q.db.QueryContext(ctx, getGroupUsers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupUser{}
	for rows.Next() {
		var i GroupUser
		if err := rows.Scan(
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MemberType,
			&i.Remarks,
			&i.Extra,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroups = `-- name: GetUserGroups :many
SELECT group_id, user_id, created_at, updated_at, member_type, remarks, extra, status FROM ` + "`" + `group_user` + "`" + ` 
WHERE user_id = ?
ORDER BY created_at DESC
`

// 获取用户参与的所有群组
func (q *Queries) GetUserGroups(ctx context.Context, userID uint64) ([]GroupUser, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroups, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupUser{}
	for rows.Next() {
		var i GroupUser
		if err := rows.Scan(
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MemberType,
			&i.Remarks,
			&i.Extra,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroups = `-- name: ListGroups :many
SELECT id, created_at, updated_at, name, avatar_url, introduction, user_num, extra FROM ` + "`" + `group` + "`" + ` 
ORDER BY created_at DESC 
LIMIT ? OFFSET ?
`

type ListGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// 获取群组列表
func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.AvatarUrl,
			&i.Introduction,
			&i.UserNum,
			&i.Extra,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE ` + "`" + `group` + "`" + ` 
SET updated_at = ?, name = ?, avatar_url = ?, introduction = ?, extra = ?
WHERE id = ?
`

type UpdateGroupParams struct {
	UpdatedAt    time.Time `json:"updated_at"`
	Name         string    `json:"name"`
	AvatarUrl    string    `json:"avatar_url"`
	Introduction string    `json:"introduction"`
	Extra        string    `json:"extra"`
	ID           uint64    `json:"id"`
}

// 更新群组信息
func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateGroup,
		arg.UpdatedAt,
		arg.Name,
		arg.AvatarUrl,
		arg.Introduction,
		arg.Extra,
		arg.ID,
	)
	return err
}

const updateGroupUserNum = `-- name: UpdateGroupUserNum :exec
UPDATE ` + "`" + `group` + "`" + ` 
SET updated_at = ?, user_num = ?
WHERE id = ?
`

type UpdateGroupUserNumParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	UserNum   int32     `json:"user_num"`
	ID        uint64    `json:"id"`
}

// 更新群组人数
func (q *Queries) UpdateGroupUserNum(ctx context.Context, arg UpdateGroupUserNumParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupUserNum, arg.UpdatedAt, arg.UserNum, arg.ID)
	return err
}

const updateGroupUserType = `-- name: UpdateGroupUserType :exec
UPDATE ` + "`" + `group_user` + "`" + ` 
SET updated_at = ?, member_type = ?
WHERE group_id = ? AND user_id = ?
`

type UpdateGroupUserTypeParams struct {
	UpdatedAt  time.Time `json:"updated_at"`
	MemberType int8      `json:"member_type"`
	GroupID    uint64    `json:"group_id"`
	UserID     uint64    `json:"user_id"`
}

// 更新群组成员类型
func (q *Queries) UpdateGroupUserType(ctx context.Context, arg UpdateGroupUserTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupUserType,
		arg.UpdatedAt,
		arg.MemberType,
		arg.GroupID,
		arg.UserID,
	)
	return err
}
