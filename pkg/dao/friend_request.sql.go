// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: friend_request.sql

package dao

import (
	"context"
	"time"
)

const acceptFriendRequest = `-- name: AcceptFriendRequest :exec
UPDATE ` + "`" + `friend_request` + "`" + ` 
SET status = 1, updated_at = ?
WHERE id = ?
`

type AcceptFriendRequestParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	ID        uint64    `json:"id"`
}

// 同意好友申请
func (q *Queries) AcceptFriendRequest(ctx context.Context, arg AcceptFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, acceptFriendRequest, arg.UpdatedAt, arg.ID)
	return err
}

const checkExistingRequest = `-- name: CheckExistingRequest :one
SELECT COUNT(*) as request_exists FROM ` + "`" + `friend_request` + "`" + ` 
WHERE requester_id = ? AND recipient_id = ? AND status = 0
`

type CheckExistingRequestParams struct {
	RequesterID uint64 `json:"requester_id"`
	RecipientID uint64 `json:"recipient_id"`
}

// 检查是否已存在好友申请
func (q *Queries) CheckExistingRequest(ctx context.Context, arg CheckExistingRequestParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkExistingRequest, arg.RequesterID, arg.RecipientID)
	var request_exists int64
	err := row.Scan(&request_exists)
	return request_exists, err
}

const createFriendRequest = `-- name: CreateFriendRequest :exec
INSERT INTO ` + "`" + `friend_request` + "`" + ` (
    requester_id, recipient_id, status, message, created_at, updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateFriendRequestParams struct {
	RequesterID uint64    `json:"requester_id"`
	RecipientID uint64    `json:"recipient_id"`
	Status      int8      `json:"status"`
	Message     string    `json:"message"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// 创建好友申请
func (q *Queries) CreateFriendRequest(ctx context.Context, arg CreateFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, createFriendRequest,
		arg.RequesterID,
		arg.RecipientID,
		arg.Status,
		arg.Message,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteFriendRequest = `-- name: DeleteFriendRequest :exec
DELETE FROM ` + "`" + `friend_request` + "`" + ` 
WHERE id = ?
`

// 删除好友申请
func (q *Queries) DeleteFriendRequest(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteFriendRequest, id)
	return err
}

const getFriendRequest = `-- name: GetFriendRequest :one
SELECT id, requester_id, recipient_id, status, message, created_at, updated_at FROM ` + "`" + `friend_request` + "`" + ` 
WHERE id = ? 
LIMIT 1
`

// 获取指定的好友申请
func (q *Queries) GetFriendRequest(ctx context.Context, id uint64) (FriendRequest, error) {
	row := q.db.QueryRowContext(ctx, getFriendRequest, id)
	var i FriendRequest
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.RecipientID,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFriendRequestByUsers = `-- name: GetFriendRequestByUsers :one
SELECT id, requester_id, recipient_id, status, message, created_at, updated_at FROM ` + "`" + `friend_request` + "`" + ` 
WHERE requester_id = ? AND recipient_id = ?
ORDER BY created_at DESC
LIMIT 1
`

type GetFriendRequestByUsersParams struct {
	RequesterID uint64 `json:"requester_id"`
	RecipientID uint64 `json:"recipient_id"`
}

// 根据申请人和接收人获取好友申请
func (q *Queries) GetFriendRequestByUsers(ctx context.Context, arg GetFriendRequestByUsersParams) (FriendRequest, error) {
	row := q.db.QueryRowContext(ctx, getFriendRequestByUsers, arg.RequesterID, arg.RecipientID)
	var i FriendRequest
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.RecipientID,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPendingFriendRequests = `-- name: GetPendingFriendRequests :many
SELECT id, requester_id, recipient_id, status, message, created_at, updated_at FROM ` + "`" + `friend_request` + "`" + ` 
WHERE recipient_id = ? AND status = 0
ORDER BY created_at DESC
`

// 获取待处理的好友申请
func (q *Queries) GetPendingFriendRequests(ctx context.Context, recipientID uint64) ([]FriendRequest, error) {
	rows, err := q.db.QueryContext(ctx, getPendingFriendRequests, recipientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FriendRequest{}
	for rows.Next() {
		var i FriendRequest
		if err := rows.Scan(
			&i.ID,
			&i.RequesterID,
			&i.RecipientID,
			&i.Status,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReceivedFriendRequests = `-- name: GetReceivedFriendRequests :many
SELECT id, requester_id, recipient_id, status, message, created_at, updated_at FROM ` + "`" + `friend_request` + "`" + ` 
WHERE recipient_id = ? AND status = ?
ORDER BY created_at DESC
`

type GetReceivedFriendRequestsParams struct {
	RecipientID uint64 `json:"recipient_id"`
	Status      int8   `json:"status"`
}

// 获取收到的好友申请列表
func (q *Queries) GetReceivedFriendRequests(ctx context.Context, arg GetReceivedFriendRequestsParams) ([]FriendRequest, error) {
	rows, err := q.db.QueryContext(ctx, getReceivedFriendRequests, arg.RecipientID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FriendRequest{}
	for rows.Next() {
		var i FriendRequest
		if err := rows.Scan(
			&i.ID,
			&i.RequesterID,
			&i.RecipientID,
			&i.Status,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentFriendRequests = `-- name: GetSentFriendRequests :many
SELECT id, requester_id, recipient_id, status, message, created_at, updated_at FROM ` + "`" + `friend_request` + "`" + ` 
WHERE requester_id = ? AND status = ?
ORDER BY created_at DESC
`

type GetSentFriendRequestsParams struct {
	RequesterID uint64 `json:"requester_id"`
	Status      int8   `json:"status"`
}

// 获取发送的好友申请列表
func (q *Queries) GetSentFriendRequests(ctx context.Context, arg GetSentFriendRequestsParams) ([]FriendRequest, error) {
	rows, err := q.db.QueryContext(ctx, getSentFriendRequests, arg.RequesterID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FriendRequest{}
	for rows.Next() {
		var i FriendRequest
		if err := rows.Scan(
			&i.ID,
			&i.RequesterID,
			&i.RecipientID,
			&i.Status,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ignoreFriendRequest = `-- name: IgnoreFriendRequest :exec
UPDATE ` + "`" + `friend_request` + "`" + ` 
SET status = 3, updated_at = ?
WHERE id = ?
`

type IgnoreFriendRequestParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	ID        uint64    `json:"id"`
}

// 忽略好友申请
func (q *Queries) IgnoreFriendRequest(ctx context.Context, arg IgnoreFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, ignoreFriendRequest, arg.UpdatedAt, arg.ID)
	return err
}

const rejectFriendRequest = `-- name: RejectFriendRequest :exec
UPDATE ` + "`" + `friend_request` + "`" + ` 
SET status = 2, updated_at = ?
WHERE id = ?
`

type RejectFriendRequestParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	ID        uint64    `json:"id"`
}

// 拒绝好友申请
func (q *Queries) RejectFriendRequest(ctx context.Context, arg RejectFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, rejectFriendRequest, arg.UpdatedAt, arg.ID)
	return err
}

const updateFriendRequestStatus = `-- name: UpdateFriendRequestStatus :exec
UPDATE ` + "`" + `friend_request` + "`" + ` 
SET status = ?, updated_at = ?
WHERE id = ?
`

type UpdateFriendRequestStatusParams struct {
	Status    int8      `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        uint64    `json:"id"`
}

// 更新好友申请状态
func (q *Queries) UpdateFriendRequestStatus(ctx context.Context, arg UpdateFriendRequestStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateFriendRequestStatus, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}
