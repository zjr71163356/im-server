// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: seq.sql

package dao

import (
	"context"
	"time"
)

const createSeq = `-- name: CreateSeq :exec
INSERT INTO ` + "`" + `seq` + "`" + ` (
    created_at, updated_at, object_type, object_id, seq
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateSeqParams struct {
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	ObjectType int8      `json:"object_type"`
	ObjectID   uint64    `json:"object_id"`
	Seq        uint64    `json:"seq"`
}

// 创建序列号记录
func (q *Queries) CreateSeq(ctx context.Context, arg CreateSeqParams) error {
	_, err := q.db.ExecContext(ctx, createSeq,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ObjectType,
		arg.ObjectID,
		arg.Seq,
	)
	return err
}

const deleteSeq = `-- name: DeleteSeq :exec
DELETE FROM ` + "`" + `seq` + "`" + ` 
WHERE object_type = ? AND object_id = ?
`

type DeleteSeqParams struct {
	ObjectType int8   `json:"object_type"`
	ObjectID   uint64 `json:"object_id"`
}

// 删除序列号记录
func (q *Queries) DeleteSeq(ctx context.Context, arg DeleteSeqParams) error {
	_, err := q.db.ExecContext(ctx, deleteSeq, arg.ObjectType, arg.ObjectID)
	return err
}

const getOrCreateSeq = `-- name: GetOrCreateSeq :exec
INSERT INTO ` + "`" + `seq` + "`" + ` (created_at, updated_at, object_type, object_id, seq)
VALUES (?, ?, ?, ?, 1)
ON DUPLICATE KEY UPDATE 
    updated_at = VALUES(updated_at),
    seq = seq + 1
`

type GetOrCreateSeqParams struct {
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	ObjectType int8      `json:"object_type"`
	ObjectID   uint64    `json:"object_id"`
}

// 获取或创建序列号（使用 INSERT ... ON DUPLICATE KEY UPDATE）
func (q *Queries) GetOrCreateSeq(ctx context.Context, arg GetOrCreateSeqParams) error {
	_, err := q.db.ExecContext(ctx, getOrCreateSeq,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ObjectType,
		arg.ObjectID,
	)
	return err
}

const getSeq = `-- name: GetSeq :one
SELECT id, created_at, updated_at, object_type, object_id, seq FROM ` + "`" + `seq` + "`" + ` 
WHERE object_type = ? AND object_id = ? 
LIMIT 1
`

type GetSeqParams struct {
	ObjectType int8   `json:"object_type"`
	ObjectID   uint64 `json:"object_id"`
}

// 获取序列号
func (q *Queries) GetSeq(ctx context.Context, arg GetSeqParams) (Seq, error) {
	row := q.db.QueryRowContext(ctx, getSeq, arg.ObjectType, arg.ObjectID)
	var i Seq
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ObjectType,
		&i.ObjectID,
		&i.Seq,
	)
	return i, err
}

const incrementSeq = `-- name: IncrementSeq :exec
UPDATE ` + "`" + `seq` + "`" + ` 
SET updated_at = ?, seq = seq + 1
WHERE object_type = ? AND object_id = ?
`

type IncrementSeqParams struct {
	UpdatedAt  time.Time `json:"updated_at"`
	ObjectType int8      `json:"object_type"`
	ObjectID   uint64    `json:"object_id"`
}

// 递增序列号
func (q *Queries) IncrementSeq(ctx context.Context, arg IncrementSeqParams) error {
	_, err := q.db.ExecContext(ctx, incrementSeq, arg.UpdatedAt, arg.ObjectType, arg.ObjectID)
	return err
}

const updateSeq = `-- name: UpdateSeq :exec
UPDATE ` + "`" + `seq` + "`" + ` 
SET updated_at = ?, seq = ?
WHERE object_type = ? AND object_id = ?
`

type UpdateSeqParams struct {
	UpdatedAt  time.Time `json:"updated_at"`
	Seq        uint64    `json:"seq"`
	ObjectType int8      `json:"object_type"`
	ObjectID   uint64    `json:"object_id"`
}

// 更新序列号
func (q *Queries) UpdateSeq(ctx context.Context, arg UpdateSeqParams) error {
	_, err := q.db.ExecContext(ctx, updateSeq,
		arg.UpdatedAt,
		arg.Seq,
		arg.ObjectType,
		arg.ObjectID,
	)
	return err
}
