// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: friend.sql

package dao

import (
	"context"
	"time"
)

const checkFriendship = `-- name: CheckFriendship :one
SELECT COUNT(*) as is_friend FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND friend_id = ? AND status = 2
`

type CheckFriendshipParams struct {
	UserID   uint64 `json:"user_id"`
	FriendID uint64 `json:"friend_id"`
}

// 检查两个用户是否是好友
func (q *Queries) CheckFriendship(ctx context.Context, arg CheckFriendshipParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkFriendship, arg.UserID, arg.FriendID)
	var is_friend int64
	err := row.Scan(&is_friend)
	return is_friend, err
}

const createFriend = `-- name: CreateFriend :exec
INSERT INTO ` + "`" + `friend` + "`" + ` (
    user_id, friend_id, created_at, updated_at, remarks, extra, status
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateFriendParams struct {
	UserID    uint64    `json:"user_id"`
	FriendID  uint64    `json:"friend_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Remarks   string    `json:"remarks"`
	Extra     string    `json:"extra"`
	Status    int8      `json:"status"`
}

// 创建好友关系
func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) error {
	_, err := q.db.ExecContext(ctx, createFriend,
		arg.UserID,
		arg.FriendID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Remarks,
		arg.Extra,
		arg.Status,
	)
	return err
}

const deleteFriend = `-- name: DeleteFriend :exec
DELETE FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND friend_id = ?
`

type DeleteFriendParams struct {
	UserID   uint64 `json:"user_id"`
	FriendID uint64 `json:"friend_id"`
}

// 删除好友关系
func (q *Queries) DeleteFriend(ctx context.Context, arg DeleteFriendParams) error {
	_, err := q.db.ExecContext(ctx, deleteFriend, arg.UserID, arg.FriendID)
	return err
}

const getFriend = `-- name: GetFriend :one
SELECT user_id, friend_id, created_at, updated_at, remarks, extra, status FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND friend_id = ? 
LIMIT 1
`

type GetFriendParams struct {
	UserID   uint64 `json:"user_id"`
	FriendID uint64 `json:"friend_id"`
}

// 获取好友关系
func (q *Queries) GetFriend(ctx context.Context, arg GetFriendParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriend, arg.UserID, arg.FriendID)
	var i Friend
	err := row.Scan(
		&i.UserID,
		&i.FriendID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Remarks,
		&i.Extra,
		&i.Status,
	)
	return i, err
}

const getFriendRequests = `-- name: GetFriendRequests :many
SELECT user_id, friend_id, created_at, updated_at, remarks, extra, status FROM ` + "`" + `friend` + "`" + ` 
WHERE friend_id = ? AND status = 1
ORDER BY created_at DESC
`

// 获取好友申请列表
func (q *Queries) GetFriendRequests(ctx context.Context, friendID uint64) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, getFriendRequests, friendID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.UserID,
			&i.FriendID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Remarks,
			&i.Extra,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFriends = `-- name: GetUserFriends :many
SELECT user_id, friend_id, created_at, updated_at, remarks, extra, status FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND status = 2
ORDER BY created_at DESC
`

// 获取用户的所有好友
func (q *Queries) GetUserFriends(ctx context.Context, userID uint64) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, getUserFriends, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.UserID,
			&i.FriendID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Remarks,
			&i.Extra,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendRemarks = `-- name: UpdateFriendRemarks :exec
UPDATE ` + "`" + `friend` + "`" + ` 
SET updated_at = ?, remarks = ?
WHERE user_id = ? AND friend_id = ?
`

type UpdateFriendRemarksParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	Remarks   string    `json:"remarks"`
	UserID    uint64    `json:"user_id"`
	FriendID  uint64    `json:"friend_id"`
}

// 更新好友备注
func (q *Queries) UpdateFriendRemarks(ctx context.Context, arg UpdateFriendRemarksParams) error {
	_, err := q.db.ExecContext(ctx, updateFriendRemarks,
		arg.UpdatedAt,
		arg.Remarks,
		arg.UserID,
		arg.FriendID,
	)
	return err
}

const updateFriendStatus = `-- name: UpdateFriendStatus :exec
UPDATE ` + "`" + `friend` + "`" + ` 
SET updated_at = ?, status = ?
WHERE user_id = ? AND friend_id = ?
`

type UpdateFriendStatusParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	Status    int8      `json:"status"`
	UserID    uint64    `json:"user_id"`
	FriendID  uint64    `json:"friend_id"`
}

// 更新好友状态（同意/拒绝好友申请）
func (q *Queries) UpdateFriendStatus(ctx context.Context, arg UpdateFriendStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateFriendStatus,
		arg.UpdatedAt,
		arg.Status,
		arg.UserID,
		arg.FriendID,
	)
	return err
}
