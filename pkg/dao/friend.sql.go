// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: friend.sql

package dao

import (
	"context"
	"time"
)

const blockFriend = `-- name: BlockFriend :exec
UPDATE ` + "`" + `friend` + "`" + ` 
SET updated_at = ?, is_blocked = 1
WHERE user_id = ? AND friend_id = ?
`

type BlockFriendParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uint64    `json:"user_id"`
	FriendID  uint64    `json:"friend_id"`
}

// 屏蔽好友
func (q *Queries) BlockFriend(ctx context.Context, arg BlockFriendParams) error {
	_, err := q.db.ExecContext(ctx, blockFriend, arg.UpdatedAt, arg.UserID, arg.FriendID)
	return err
}

const checkFriendship = `-- name: CheckFriendship :one
SELECT COUNT(*) as is_friend FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND friend_id = ?
`

type CheckFriendshipParams struct {
	UserID   uint64 `json:"user_id"`
	FriendID uint64 `json:"friend_id"`
}

// 检查两个用户是否是好友
func (q *Queries) CheckFriendship(ctx context.Context, arg CheckFriendshipParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkFriendship, arg.UserID, arg.FriendID)
	var is_friend int64
	err := row.Scan(&is_friend)
	return is_friend, err
}

const createFriend = `-- name: CreateFriend :exec
INSERT INTO ` + "`" + `friend` + "`" + ` (
    user_id, friend_id, remark, category_id, is_blocked, created_at, updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateFriendParams struct {
	UserID     uint64    `json:"user_id"`
	FriendID   uint64    `json:"friend_id"`
	Remark     string    `json:"remark"`
	CategoryID uint64    `json:"category_id"`
	IsBlocked  int8      `json:"is_blocked"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// 创建好友关系
func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) error {
	_, err := q.db.ExecContext(ctx, createFriend,
		arg.UserID,
		arg.FriendID,
		arg.Remark,
		arg.CategoryID,
		arg.IsBlocked,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteFriend = `-- name: DeleteFriend :exec
DELETE FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND friend_id = ?
`

type DeleteFriendParams struct {
	UserID   uint64 `json:"user_id"`
	FriendID uint64 `json:"friend_id"`
}

// 删除好友关系
func (q *Queries) DeleteFriend(ctx context.Context, arg DeleteFriendParams) error {
	_, err := q.db.ExecContext(ctx, deleteFriend, arg.UserID, arg.FriendID)
	return err
}

const getBlockedFriends = `-- name: GetBlockedFriends :many
SELECT id, user_id, friend_id, remark, category_id, is_blocked, created_at, updated_at FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND is_blocked = 1
ORDER BY created_at DESC
`

// 获取被屏蔽的好友
func (q *Queries) GetBlockedFriends(ctx context.Context, userID uint64) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, getBlockedFriends, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FriendID,
			&i.Remark,
			&i.CategoryID,
			&i.IsBlocked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriend = `-- name: GetFriend :one
SELECT id, user_id, friend_id, remark, category_id, is_blocked, created_at, updated_at FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND friend_id = ? 
LIMIT 1
`

type GetFriendParams struct {
	UserID   uint64 `json:"user_id"`
	FriendID uint64 `json:"friend_id"`
}

// 获取好友关系
func (q *Queries) GetFriend(ctx context.Context, arg GetFriendParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriend, arg.UserID, arg.FriendID)
	var i Friend
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FriendID,
		&i.Remark,
		&i.CategoryID,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFriends = `-- name: GetUserFriends :many
SELECT id, user_id, friend_id, remark, category_id, is_blocked, created_at, updated_at FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND is_blocked = 0
ORDER BY created_at DESC
`

// 获取用户的所有好友
func (q *Queries) GetUserFriends(ctx context.Context, userID uint64) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, getUserFriends, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FriendID,
			&i.Remark,
			&i.CategoryID,
			&i.IsBlocked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFriendsByCategory = `-- name: GetUserFriendsByCategory :many
SELECT id, user_id, friend_id, remark, category_id, is_blocked, created_at, updated_at FROM ` + "`" + `friend` + "`" + ` 
WHERE user_id = ? AND category_id = ? AND is_blocked = 0
ORDER BY created_at DESC
`

type GetUserFriendsByCategoryParams struct {
	UserID     uint64 `json:"user_id"`
	CategoryID uint64 `json:"category_id"`
}

// 按分类获取用户的好友
func (q *Queries) GetUserFriendsByCategory(ctx context.Context, arg GetUserFriendsByCategoryParams) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, getUserFriendsByCategory, arg.UserID, arg.CategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FriendID,
			&i.Remark,
			&i.CategoryID,
			&i.IsBlocked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unblockFriend = `-- name: UnblockFriend :exec
UPDATE ` + "`" + `friend` + "`" + ` 
SET updated_at = ?, is_blocked = 0
WHERE user_id = ? AND friend_id = ?
`

type UnblockFriendParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uint64    `json:"user_id"`
	FriendID  uint64    `json:"friend_id"`
}

// 取消屏蔽好友
func (q *Queries) UnblockFriend(ctx context.Context, arg UnblockFriendParams) error {
	_, err := q.db.ExecContext(ctx, unblockFriend, arg.UpdatedAt, arg.UserID, arg.FriendID)
	return err
}

const updateFriendCategory = `-- name: UpdateFriendCategory :exec
UPDATE ` + "`" + `friend` + "`" + ` 
SET updated_at = ?, category_id = ?
WHERE user_id = ? AND friend_id = ?
`

type UpdateFriendCategoryParams struct {
	UpdatedAt  time.Time `json:"updated_at"`
	CategoryID uint64    `json:"category_id"`
	UserID     uint64    `json:"user_id"`
	FriendID   uint64    `json:"friend_id"`
}

// 更新好友分类
func (q *Queries) UpdateFriendCategory(ctx context.Context, arg UpdateFriendCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateFriendCategory,
		arg.UpdatedAt,
		arg.CategoryID,
		arg.UserID,
		arg.FriendID,
	)
	return err
}

const updateFriendRemark = `-- name: UpdateFriendRemark :exec
UPDATE ` + "`" + `friend` + "`" + ` 
SET updated_at = ?, remark = ?
WHERE user_id = ? AND friend_id = ?
`

type UpdateFriendRemarkParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	Remark    string    `json:"remark"`
	UserID    uint64    `json:"user_id"`
	FriendID  uint64    `json:"friend_id"`
}

// 更新好友备注
func (q *Queries) UpdateFriendRemark(ctx context.Context, arg UpdateFriendRemarkParams) error {
	_, err := q.db.ExecContext(ctx, updateFriendRemark,
		arg.UpdatedAt,
		arg.Remark,
		arg.UserID,
		arg.FriendID,
	)
	return err
}
