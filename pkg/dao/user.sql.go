// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (
    created_at, updated_at, phone_number, nickname, sex, avatar_url, extra, hashed_password, salt
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

// 创建用户
func (q *Queries) CreateUser(ctx context.Context, createdAt time.Time, updatedAt time.Time, phoneNumber string, nickname string, sex int8, avatarUrl string, extra string, hashedPassword string, salt string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		createdAt,
		updatedAt,
		phoneNumber,
		nickname,
		sex,
		avatarUrl,
		extra,
		hashedPassword,
		salt,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM ` + "`" + `user` + "`" + ` 
WHERE id = ?
`

// 删除用户
func (q *Queries) DeleteUser(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, hashed_password, salt, username, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
WHERE id = ? LIMIT 1
`

// 根据用户ID获取用户信息
func (q *Queries) GetUser(ctx context.Context, id uint64) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.Nickname,
		&i.Sex,
		&i.AvatarUrl,
		&i.Extra,
	)
	return &i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, hashed_password, salt, username, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
WHERE phone_number = ? LIMIT 1
`

// 根据手机号获取用户信息
func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.Nickname,
		&i.Sex,
		&i.AvatarUrl,
		&i.Extra,
	)
	return &i, err
}

const getUserByPhoneForAuth = `-- name: GetUserByPhoneForAuth :one
SELECT id, phone_number, hashed_password, salt FROM ` + "`" + `user` + "`" + ` 
WHERE phone_number = ? LIMIT 1
`

type GetUserByPhoneForAuthRow struct {
	ID             uint64 `db:"id" json:"id"`
	PhoneNumber    string `db:"phone_number" json:"phone_number"`
	HashedPassword string `db:"hashed_password" json:"hashed_password"`
	Salt           string `db:"salt" json:"salt"`
}

// 根据手机号获取用户认证信息
func (q *Queries) GetUserByPhoneForAuth(ctx context.Context, phoneNumber string) (*GetUserByPhoneForAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneForAuth, phoneNumber)
	var i GetUserByPhoneForAuthRow
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.Salt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, hashed_password, salt, username, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
ORDER BY created_at DESC 
LIMIT ? OFFSET ?
`

// 获取用户列表
func (q *Queries) ListUsers(ctx context.Context, limit int32, offset int32) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.HashedPassword,
			&i.Salt,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.Nickname,
			&i.Sex,
			&i.AvatarUrl,
			&i.Extra,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE ` + "`" + `user` + "`" + ` 
SET updated_at = ?, nickname = ?, sex = ?, avatar_url = ?, extra = ?
WHERE id = ?
`

// 更新用户信息
func (q *Queries) UpdateUser(ctx context.Context, updatedAt time.Time, nickname string, sex int8, avatarUrl string, extra string, iD uint64) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		updatedAt,
		nickname,
		sex,
		avatarUrl,
		extra,
		iD,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE ` + "`" + `user` + "`" + ` 
SET updated_at = ?, avatar_url = ?
WHERE id = ?
`

// 更新用户头像
func (q *Queries) UpdateUserAvatar(ctx context.Context, updatedAt time.Time, avatarUrl string, iD uint64) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatar, updatedAt, avatarUrl, iD)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE ` + "`" + `user` + "`" + ` 
SET updated_at = ?, hashed_password = ?, salt = ?
WHERE id = ?
`

// 更新用户密码
func (q *Queries) UpdateUserPassword(ctx context.Context, updatedAt time.Time, hashedPassword string, salt string, iD uint64) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword,
		updatedAt,
		hashedPassword,
		salt,
		iD,
	)
	return err
}
