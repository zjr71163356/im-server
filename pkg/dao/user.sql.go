// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createUserByUsername = `-- name: CreateUserByUsername :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (
    created_at, updated_at, username, hashed_password
) VALUES (
    ?, ?, ?, ?
)
`

type CreateUserByUsernameParams struct {
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
}

// 创建用户
func (q *Queries) CreateUserByUsername(ctx context.Context, arg CreateUserByUsernameParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserByUsername,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.HashedPassword,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM ` + "`" + `user` + "`" + ` 
WHERE id = ?
`

// 删除用户
func (q *Queries) DeleteUser(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, hashed_password, salt, username, email, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
WHERE id = ? LIMIT 1
`

// 根据用户ID获取用户信息
func (q *Queries) GetUser(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.Nickname,
		&i.Sex,
		&i.AvatarUrl,
		&i.Extra,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, hashed_password, salt, username, email, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
WHERE email = ? LIMIT 1
`

// 根据邮箱获取用户信息
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.Nickname,
		&i.Sex,
		&i.AvatarUrl,
		&i.Extra,
	)
	return i, err
}

const getUserByEmailForAuth = `-- name: GetUserByEmailForAuth :one
SELECT id, email, hashed_password, salt FROM ` + "`" + `user` + "`" + ` 
WHERE email = ? LIMIT 1
`

type GetUserByEmailForAuthRow struct {
	ID             uint64 `json:"id"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	Salt           string `json:"salt"`
}

// 根据邮箱获取用户认证信息
func (q *Queries) GetUserByEmailForAuth(ctx context.Context, email string) (GetUserByEmailForAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailForAuth, email)
	var i GetUserByEmailForAuthRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Salt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, hashed_password, salt, username, email, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
WHERE phone_number = ? LIMIT 1
`

// 根据手机号获取用户信息
func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.Nickname,
		&i.Sex,
		&i.AvatarUrl,
		&i.Extra,
	)
	return i, err
}

const getUserByPhoneForAuth = `-- name: GetUserByPhoneForAuth :one
SELECT id, phone_number, hashed_password, salt FROM ` + "`" + `user` + "`" + ` 
WHERE phone_number = ? LIMIT 1
`

type GetUserByPhoneForAuthRow struct {
	ID             uint64 `json:"id"`
	PhoneNumber    string `json:"phone_number"`
	HashedPassword string `json:"hashed_password"`
	Salt           string `json:"salt"`
}

// 根据手机号获取用户认证信息
func (q *Queries) GetUserByPhoneForAuth(ctx context.Context, phoneNumber string) (GetUserByPhoneForAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneForAuth, phoneNumber)
	var i GetUserByPhoneForAuthRow
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.Salt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, hashed_password, salt, username, email, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
WHERE username = ? LIMIT 1
`

// 根据用户名获取用户信息
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.Nickname,
		&i.Sex,
		&i.AvatarUrl,
		&i.Extra,
	)
	return i, err
}

const getUserByUsernameForAuth = `-- name: GetUserByUsernameForAuth :one
SELECT id, username, hashed_password, salt FROM ` + "`" + `user` + "`" + ` 
WHERE username = ? LIMIT 1
`

type GetUserByUsernameForAuthRow struct {
	ID             uint64 `json:"id"`
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Salt           string `json:"salt"`
}

// 根据用户名获取用户认证信息
func (q *Queries) GetUserByUsernameForAuth(ctx context.Context, username string) (GetUserByUsernameForAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameForAuth, username)
	var i GetUserByUsernameForAuthRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Salt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, hashed_password, salt, username, email, created_at, updated_at, phone_number, nickname, sex, avatar_url, extra FROM ` + "`" + `user` + "`" + ` 
ORDER BY created_at DESC 
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// 获取用户列表
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.HashedPassword,
			&i.Salt,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.Nickname,
			&i.Sex,
			&i.AvatarUrl,
			&i.Extra,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE ` + "`" + `user` + "`" + ` 
SET updated_at = ?, nickname = ?, sex = ?, avatar_url = ?, extra = ?
WHERE id = ?
`

type UpdateUserParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	Nickname  string    `json:"nickname"`
	Sex       int8      `json:"sex"`
	AvatarUrl string    `json:"avatar_url"`
	Extra     string    `json:"extra"`
	ID        uint64    `json:"id"`
}

// 更新用户信息
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UpdatedAt,
		arg.Nickname,
		arg.Sex,
		arg.AvatarUrl,
		arg.Extra,
		arg.ID,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE ` + "`" + `user` + "`" + ` 
SET updated_at = ?, avatar_url = ?
WHERE id = ?
`

type UpdateUserAvatarParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	AvatarUrl string    `json:"avatar_url"`
	ID        uint64    `json:"id"`
}

// 更新用户头像
func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatar, arg.UpdatedAt, arg.AvatarUrl, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE ` + "`" + `user` + "`" + ` 
SET updated_at = ?, hashed_password = ?, salt = ?
WHERE id = ?
`

type UpdateUserPasswordParams struct {
	UpdatedAt      time.Time `json:"updated_at"`
	HashedPassword string    `json:"hashed_password"`
	Salt           string    `json:"salt"`
	ID             uint64    `json:"id"`
}

// 更新用户密码
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword,
		arg.UpdatedAt,
		arg.HashedPassword,
		arg.Salt,
		arg.ID,
	)
	return err
}
